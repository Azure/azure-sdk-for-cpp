// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

#include "azure/keyvault/administration/backup_restore_client.hpp"

#include <azure/core/exception.hpp>
#include <azure/core/http/http.hpp>
#include <azure/core/http/http_status_code.hpp>
#include <azure/core/internal/json/json.hpp>
#include <azure/core/io/body_stream.hpp>

#include <cstdint>
#include <utility>

using namespace Azure::Security::KeyVault::Administration;

BackupRestoreClient::BackupRestoreClient(std::string const& vaultBaseUrl)
    : m_pipeline(new Core::Http::_internal::HttpPipeline(
        {},
        "security-keyvault-administration",
        "",
        {},
        {})),
      m_vaultBaseUrl(vaultBaseUrl)
{
}

Azure::Response<FullBackupOperation> BackupRestoreClient::FullBackup(
    FullBackupOptions const& options,
    Core::Context const& context)
{
  auto url = m_vaultBaseUrl;
  url.AppendPath("backup");

  url.SetQueryParameters({{"api-version", "7.5"}});

  std::string jsonBody;
  {
    auto jsonRoot = Core::Json::_internal::json::object();

    jsonRoot["storageResourceUri"] = options.AzureStorageBlobContainerUri.StorageResourceUri;

    if (options.AzureStorageBlobContainerUri.Token.HasValue())
    {
      jsonRoot["token"] = options.AzureStorageBlobContainerUri.Token.Value();
    }

    if (options.AzureStorageBlobContainerUri.UseManagedIdentity.HasValue())
    {
      jsonRoot["useManagedIdentity"]
          = options.AzureStorageBlobContainerUri.UseManagedIdentity.Value();
    }

    jsonBody = jsonRoot.dump();
  }

  Core::IO::MemoryBodyStream requestBody(
      reinterpret_cast<std::uint8_t const*>(jsonBody.data()), jsonBody.length());

  Core::Http::Request request(Core::Http::HttpMethod::Post, url, &requestBody);

  request.SetHeader("Content-Type", "application/json");
  request.SetHeader("Content-Length", std::to_string(requestBody.Length()));

  auto rawResponse = m_pipeline->Send(request, context);
  auto const httpStatusCode = rawResponse->GetStatusCode();

  if (httpStatusCode != Core::Http::HttpStatusCode::Accepted)
  {
    throw Core::RequestFailedException(rawResponse);
  }

  FullBackupOperation response{};
  {
    auto const& responseBody = rawResponse->GetBody();
    if (responseBody.size() > 0)
    {
      auto const jsonRoot
          = Core::Json::_internal::json::parse(responseBody.begin(), responseBody.end());

      response.Status = jsonRoot["status"].get<std::string>();

      response.StatusDetails = jsonRoot["statusDetails"].get<std::string>();

      response.StartTime = Core::_internal::PosixTimeConverter::PosixTimeToDateTime(
          jsonRoot["startTime"].is_string() ? std::stoll(jsonRoot["startTime"].get<std::string>())
                                            : jsonRoot["startTime"].get<std::int64_t>());

      if (jsonRoot.contains("endTime") && !jsonRoot["endTime"].is_null())
      {
        response.EndTime = Core::_internal::PosixTimeConverter::PosixTimeToDateTime(
            jsonRoot["endTime"].is_string() ? std::stoll(jsonRoot["endTime"].get<std::string>())
                                            : jsonRoot["endTime"].get<std::int64_t>());
      }

      response.JobId = jsonRoot["jobId"].get<std::string>();

      response.AzureStorageBlobContainerUri
          = jsonRoot["azureStorageBlobContainerUri"].get<std::string>();
    }
  }

  return Response<FullBackupOperation>(std::move(response), std::move(rawResponse));
}

Azure::Response<FullBackupOperation> BackupRestoreClient::FullBackupStatus(
    FullBackupStatusOptions const& options,
    Core::Context const& context)
{
  auto url = m_vaultBaseUrl;
  url.AppendPath("backup/");
  url.AppendPath(!options.JobId.empty() ? Core::Url::Encode(options.JobId) : "null");
  url.AppendPath("pending");

  url.SetQueryParameters({{"api-version", "7.5"}});

  Core::Http::Request request(Core::Http::HttpMethod::Get, url);

  auto rawResponse = m_pipeline->Send(request, context);
  auto const httpStatusCode = rawResponse->GetStatusCode();

  if (httpStatusCode != Core::Http::HttpStatusCode::Ok)
  {
    throw Core::RequestFailedException(rawResponse);
  }

  FullBackupOperation response{};
  {
    auto const& responseBody = rawResponse->GetBody();
    if (responseBody.size() > 0)
    {
      auto const jsonRoot
          = Core::Json::_internal::json::parse(responseBody.begin(), responseBody.end());

      response.Status = jsonRoot["status"].get<std::string>();

      response.StatusDetails = jsonRoot["statusDetails"].get<std::string>();

      response.StartTime = Core::_internal::PosixTimeConverter::PosixTimeToDateTime(
          jsonRoot["startTime"].is_string() ? std::stoll(jsonRoot["startTime"].get<std::string>())
                                            : jsonRoot["startTime"].get<std::int64_t>());

      if (jsonRoot.contains("endTime") && !jsonRoot["endTime"].is_null())
      {
        response.EndTime = Core::_internal::PosixTimeConverter::PosixTimeToDateTime(
            jsonRoot["endTime"].is_string() ? std::stoll(jsonRoot["endTime"].get<std::string>())
                                            : jsonRoot["endTime"].get<std::int64_t>());
      }

      response.JobId = jsonRoot["jobId"].get<std::string>();

      response.AzureStorageBlobContainerUri
          = jsonRoot["azureStorageBlobContainerUri"].get<std::string>();
    }
  }

  return Response<FullBackupOperation>(std::move(response), std::move(rawResponse));
}

Azure::Response<RestoreOperation> BackupRestoreClient::FullRestoreOperation(
    FullRestoreOperationOptions const& options,
    Core::Context const& context)
{
  auto url = m_vaultBaseUrl;
  url.AppendPath("restore");

  url.SetQueryParameters({{"api-version", "7.5"}});

  std::string jsonBody;
  {
    auto jsonRoot = Core::Json::_internal::json::object();

    jsonRoot["sasTokenParameters"]["storageResourceUri"]
        = options.RestoreBlobDetails.SasTokenParameters.StorageResourceUri;

    if (options.RestoreBlobDetails.SasTokenParameters.Token.HasValue())
    {
      jsonRoot["sasTokenParameters"]["token"]
          = options.RestoreBlobDetails.SasTokenParameters.Token.Value();
    }

    if (options.RestoreBlobDetails.SasTokenParameters.UseManagedIdentity.HasValue())
    {
      jsonRoot["sasTokenParameters"]["useManagedIdentity"]
          = options.RestoreBlobDetails.SasTokenParameters.UseManagedIdentity.Value();
    }

    jsonRoot["folderToRestore"] = options.RestoreBlobDetails.FolderToRestore;

    jsonBody = jsonRoot.dump();
  }

  Core::IO::MemoryBodyStream requestBody(
      reinterpret_cast<std::uint8_t const*>(jsonBody.data()), jsonBody.length());

  Core::Http::Request request(Core::Http::HttpMethod::Put, url, &requestBody);

  request.SetHeader("Content-Type", "application/json");
  request.SetHeader("Content-Length", std::to_string(requestBody.Length()));

  auto rawResponse = m_pipeline->Send(request, context);
  auto const httpStatusCode = rawResponse->GetStatusCode();

  if (httpStatusCode != Core::Http::HttpStatusCode::Accepted)
  {
    throw Core::RequestFailedException(rawResponse);
  }

  RestoreOperation response{};
  {
    auto const& responseBody = rawResponse->GetBody();
    if (responseBody.size() > 0)
    {
      auto const jsonRoot
          = Core::Json::_internal::json::parse(responseBody.begin(), responseBody.end());

      response.Status = jsonRoot["status"].get<std::string>();

      response.StatusDetails = jsonRoot["statusDetails"].get<std::string>();

      response.JobId = jsonRoot["jobId"].get<std::string>();

      response.StartTime = Core::_internal::PosixTimeConverter::PosixTimeToDateTime(
          jsonRoot["startTime"].is_string() ? std::stoll(jsonRoot["startTime"].get<std::string>())
                                            : jsonRoot["startTime"].get<std::int64_t>());

      if (jsonRoot.contains("endTime") && !jsonRoot["endTime"].is_null())
      {
        response.EndTime = Core::_internal::PosixTimeConverter::PosixTimeToDateTime(
            jsonRoot["endTime"].is_string() ? std::stoll(jsonRoot["endTime"].get<std::string>())
                                            : jsonRoot["endTime"].get<std::int64_t>());
      }
    }
  }

  return Response<RestoreOperation>(std::move(response), std::move(rawResponse));
}

Azure::Response<RestoreOperation> BackupRestoreClient::RestoreStatus(
    RestoreStatusOptions const& options,
    Core::Context const& context)
{
  auto url = m_vaultBaseUrl;
  url.AppendPath("restore/");
  url.AppendPath(!options.JobId.empty() ? Core::Url::Encode(options.JobId) : "null");
  url.AppendPath("pending");

  url.SetQueryParameters({{"api-version", "7.5"}});

  Core::Http::Request request(Core::Http::HttpMethod::Get, url);

  auto rawResponse = m_pipeline->Send(request, context);
  auto const httpStatusCode = rawResponse->GetStatusCode();

  if (httpStatusCode != Core::Http::HttpStatusCode::Ok)
  {
    throw Core::RequestFailedException(rawResponse);
  }

  RestoreOperation response{};
  {
    auto const& responseBody = rawResponse->GetBody();
    if (responseBody.size() > 0)
    {
      auto const jsonRoot
          = Core::Json::_internal::json::parse(responseBody.begin(), responseBody.end());

      response.Status = jsonRoot["status"].get<std::string>();

      response.StatusDetails = jsonRoot["statusDetails"].get<std::string>();

      response.JobId = jsonRoot["jobId"].get<std::string>();

      response.StartTime = Core::_internal::PosixTimeConverter::PosixTimeToDateTime(
          jsonRoot["startTime"].is_string() ? std::stoll(jsonRoot["startTime"].get<std::string>())
                                            : jsonRoot["startTime"].get<std::int64_t>());

      if (jsonRoot.contains("endTime") && !jsonRoot["endTime"].is_null())
      {
        response.EndTime = Core::_internal::PosixTimeConverter::PosixTimeToDateTime(
            jsonRoot["endTime"].is_string() ? std::stoll(jsonRoot["endTime"].get<std::string>())
                                            : jsonRoot["endTime"].get<std::int64_t>());
      }
    }
  }

  return Response<RestoreOperation>(std::move(response), std::move(rawResponse));
}

Azure::Response<SelectiveKeyRestoreOperation> BackupRestoreClient::SelectiveKeyRestoreOperationF(
    SelectiveKeyRestoreOperationOptions const& options,
    Core::Context const& context)
{
  auto url = m_vaultBaseUrl;
  url.AppendPath("keys/");
  url.AppendPath(!options.KeyName.empty() ? Core::Url::Encode(options.KeyName) : "null");
  url.AppendPath("restore");

  url.SetQueryParameters({{"api-version", "7.5"}});

  std::string jsonBody;
  {
    auto jsonRoot = Core::Json::_internal::json::object();

    jsonRoot["sasTokenParameters"]["storageResourceUri"]
        = options.RestoreBlobDetails.SasTokenParameters.StorageResourceUri;

    if (options.RestoreBlobDetails.SasTokenParameters.Token.HasValue())
    {
      jsonRoot["sasTokenParameters"]["token"]
          = options.RestoreBlobDetails.SasTokenParameters.Token.Value();
    }

    if (options.RestoreBlobDetails.SasTokenParameters.UseManagedIdentity.HasValue())
    {
      jsonRoot["sasTokenParameters"]["useManagedIdentity"]
          = options.RestoreBlobDetails.SasTokenParameters.UseManagedIdentity.Value();
    }

    jsonRoot["folder"] = options.RestoreBlobDetails.Folder;

    jsonBody = jsonRoot.dump();
  }

  Core::IO::MemoryBodyStream requestBody(
      reinterpret_cast<std::uint8_t const*>(jsonBody.data()), jsonBody.length());

  Core::Http::Request request(Core::Http::HttpMethod::Put, url, &requestBody);

  request.SetHeader("Content-Type", "application/json");
  request.SetHeader("Content-Length", std::to_string(requestBody.Length()));

  auto rawResponse = m_pipeline->Send(request, context);
  auto const httpStatusCode = rawResponse->GetStatusCode();

  if (httpStatusCode != Core::Http::HttpStatusCode::Accepted)
  {
    throw Core::RequestFailedException(rawResponse);
  }

  SelectiveKeyRestoreOperation response{};
  {
    auto const& responseBody = rawResponse->GetBody();
    if (responseBody.size() > 0)
    {
      auto const jsonRoot
          = Core::Json::_internal::json::parse(responseBody.begin(), responseBody.end());

      response.Status = jsonRoot["status"].get<std::string>();

      response.StatusDetails = jsonRoot["statusDetails"].get<std::string>();

      response.JobId = jsonRoot["jobId"].get<std::string>();

      response.StartTime = Core::_internal::PosixTimeConverter::PosixTimeToDateTime(
          jsonRoot["startTime"].is_string() ? std::stoll(jsonRoot["startTime"].get<std::string>())
                                            : jsonRoot["startTime"].get<std::int64_t>());

      if (jsonRoot.contains("endTime") && !jsonRoot["endTime"].is_null())
      {
        response.EndTime = Core::_internal::PosixTimeConverter::PosixTimeToDateTime(
            jsonRoot["endTime"].is_string() ? std::stoll(jsonRoot["endTime"].get<std::string>())
                                            : jsonRoot["endTime"].get<std::int64_t>());
      }
    }
  }

  return Response<SelectiveKeyRestoreOperation>(std::move(response), std::move(rawResponse));
}
