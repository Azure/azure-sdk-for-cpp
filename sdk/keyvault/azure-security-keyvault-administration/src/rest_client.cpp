
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
//
// Code generated by Microsoft (R) AutoRest C++ Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
#include <azure/keyvault/administration/rest_client.hpp>

#include <cstdint>
#include <string>
#include <utility>

#include <azure/core/base64.hpp>
#include <azure/core/context.hpp>
#include <azure/core/datetime.hpp>
#include <azure/core/exception.hpp>
#include <azure/core/http/http.hpp>
#include <azure/core/http/http_status_code.hpp>
#include <azure/core/internal/json/json.hpp>
#include <azure/core/io/body_stream.hpp>
#include <azure/core/response.hpp>
#include <azure/core/url.hpp>

namespace Azure { namespace Security { namespace KeyVault { namespace Administration {
  const DeletionRecoveryLevel DeletionRecoveryLevel::Purgeable("Purgeable");

  const DeletionRecoveryLevel DeletionRecoveryLevel::RecoverablePurgeable("Recoverable+Purgeable");

  const DeletionRecoveryLevel DeletionRecoveryLevel::Recoverable("Recoverable");

  const DeletionRecoveryLevel DeletionRecoveryLevel::RecoverableProtectedSubscription(
      "Recoverable+ProtectedSubscription");

  const DeletionRecoveryLevel DeletionRecoveryLevel::CustomizedRecoverablePurgeable(
      "CustomizedRecoverable+Purgeable");

  const DeletionRecoveryLevel DeletionRecoveryLevel::CustomizedRecoverable("CustomizedRecoverable");

  const DeletionRecoveryLevel DeletionRecoveryLevel::CustomizedRecoverableProtectedSubscription(
      "CustomizedRecoverable+ProtectedSubscription");

  Client::Client(Azure::Core::Url url)
      : m_pipeline(new Core::Http::_internal::HttpPipeline({}, "null", "0", {}, {})),
        m_url(std::move(url))
  {
  }

  Azure::Response<SecretBundle> Client::SetSecret(
      const SetSecretOptions& options,
      const Azure::Core::Context& context)
  {
    std::string jsonBody;
    {
      auto jsonRoot = Azure::Core::Json::_internal::json::object();
      jsonRoot["value"] = options.parameters.value;
      ///         jsonRoot["contentType"] = options.parameters.contentType;
      ///         jsonRoot["attributes"]["recoverableDays"]
      ///             = options.parameters.secretAttributes.recoverableDays;
      ///         jsonRoot["attributes"]["recoveryLevel"]
      ///             = options.parameters.secretAttributes.recoveryLevel;
      jsonBody = jsonRoot.dump();
    }
    Azure::Core::IO::MemoryBodyStream requestBody(
        reinterpret_cast<const uint8_t*>(jsonBody.data()), jsonBody.length());
    m_url.SetQueryParameters({{"apiVersion", "7.4-preview.1"}});
    auto request
        = Azure::Core::Http::Request(Azure::Core::Http::HttpMethod::Put, m_url, &requestBody);
    request.SetHeader("Content-Type", "application/json");
    request.SetHeader("Content-Length", std::to_string(requestBody.Length()));
    request.GetUrl().AppendQueryParameter("api-version", "7.4-preview.1");
    auto pRawResponse = m_pipeline->Send(request, context);
    auto httpStatusCode = pRawResponse->GetStatusCode();
    if (httpStatusCode != Azure::Core::Http::HttpStatusCode::Ok)
    {
      throw Azure::Core::RequestFailedException(pRawResponse);
    }
    SecretBundle response;
    {
      const auto& responseBody = pRawResponse->GetBody();
      auto jsonRoot
          = Azure::Core::Json::_internal::json::parse(responseBody.begin(), responseBody.end());
      response.value = jsonRoot["value"].get<std::string>();
      response.id = jsonRoot["id"].get<std::string>();
      response.contentType = jsonRoot["contentType"].get<std::string>();
      response.attributes.recoverableDays = jsonRoot["recoverableDays"].is_number_integer()
          ? jsonRoot["recoverableDays"].get<int32_t>()
          : std::stoi(jsonRoot["recoverableDays"].get<std::string>());
      response.attributes.recoveryLevel
          = DeletionRecoveryLevel(jsonRoot["recoveryLevel"].get<std::string>());
      response.kid = jsonRoot["kid"].get<std::string>();
      response.managed = jsonRoot["managed"].is_boolean()
          ? jsonRoot["managed"].get<bool>()
          : jsonRoot["managed"].get<std::string>() == std::string("true");
    }
    return Azure::Response<SecretBundle>(std::move(response), std::move(pRawResponse));
  }

  Azure::Response<DeletedSecretBundle> Client::DeleteSecret(const Azure::Core::Context& context)
  {
    m_url.SetQueryParameters({{"apiVersion", "7.4-preview.1"}});
    auto request = Azure::Core::Http::Request(Azure::Core::Http::HttpMethod::Delete, m_url);
    request.GetUrl().AppendQueryParameter("api-version", "7.4-preview.1");
    auto pRawResponse = m_pipeline->Send(request, context);
    auto httpStatusCode = pRawResponse->GetStatusCode();
    if (httpStatusCode != Azure::Core::Http::HttpStatusCode::Ok)
    {
      throw Azure::Core::RequestFailedException(pRawResponse);
    }
    DeletedSecretBundle response;
    {
      const auto& responseBody = pRawResponse->GetBody();
      auto jsonRoot
          = Azure::Core::Json::_internal::json::parse(responseBody.begin(), responseBody.end());
      response.recoveryId = jsonRoot["recoveryId"].get<std::string>();
      response.scheduledPurgeDate = Azure::Core::_internal::PosixTimeConverter::PosixTimeToDateTime(
          std::stoll(jsonRoot["scheduledPurgeDate"].get<std::string>()));
      response.deletedDate = Azure::Core::_internal::PosixTimeConverter::PosixTimeToDateTime(
          std::stoll(jsonRoot["deletedDate"].get<std::string>()));
    }
    return Azure::Response<DeletedSecretBundle>(std::move(response), std::move(pRawResponse));
  }

  Azure::Response<SecretBundle> Client::UpdateSecret(
      const UpdateSecretOptions& options,
      const Azure::Core::Context& context)
  {
    std::string jsonBody;
    {
      auto jsonRoot = Azure::Core::Json::_internal::json::object();
      jsonRoot["contentType"] = options.parameters.contentType;
      jsonRoot["attributes"]["recoverableDays"]
          = options.parameters.secretAttributes.recoverableDays;
      ///          jsonRoot["attributes"]["recoveryLevel"]
      ///              = options.parameters.secretAttributes.recoveryLevel;
      jsonBody = jsonRoot.dump();
    }
    Azure::Core::IO::MemoryBodyStream requestBody(
        reinterpret_cast<const uint8_t*>(jsonBody.data()), jsonBody.length());
    m_url.SetQueryParameters({{"apiVersion", "7.4-preview.1"}});
    auto request
        = Azure::Core::Http::Request(Azure::Core::Http::HttpMethod::Patch, m_url, &requestBody);
    request.SetHeader("Content-Type", "application/json");
    request.SetHeader("Content-Length", std::to_string(requestBody.Length()));
    request.GetUrl().AppendQueryParameter("api-version", "7.4-preview.1");
    auto pRawResponse = m_pipeline->Send(request, context);
    auto httpStatusCode = pRawResponse->GetStatusCode();
    if (httpStatusCode != Azure::Core::Http::HttpStatusCode::Ok)
    {
      throw Azure::Core::RequestFailedException(pRawResponse);
    }
    SecretBundle response;
    {
      const auto& responseBody = pRawResponse->GetBody();
      auto jsonRoot
          = Azure::Core::Json::_internal::json::parse(responseBody.begin(), responseBody.end());
      response.value = jsonRoot["value"].get<std::string>();
      response.id = jsonRoot["id"].get<std::string>();
      response.contentType = jsonRoot["contentType"].get<std::string>();
      response.attributes.recoverableDays = jsonRoot["recoverableDays"].is_number_integer()
          ? jsonRoot["recoverableDays"].get<int32_t>()
          : std::stoi(jsonRoot["recoverableDays"].get<std::string>());
      response.attributes.recoveryLevel
          = DeletionRecoveryLevel(jsonRoot["recoveryLevel"].get<std::string>());
      response.kid = jsonRoot["kid"].get<std::string>();
      response.managed = jsonRoot["managed"].is_boolean()
          ? jsonRoot["managed"].get<bool>()
          : jsonRoot["managed"].get<std::string>() == std::string("true");
    }
    return Azure::Response<SecretBundle>(std::move(response), std::move(pRawResponse));
  }

  Azure::Response<SecretBundle> Client::GetSecret(const Azure::Core::Context& context)
  {
    m_url.SetQueryParameters({{"apiVersion", "7.4-preview.1"}});
    auto request = Azure::Core::Http::Request(Azure::Core::Http::HttpMethod::Get, m_url);
    request.GetUrl().AppendQueryParameter("api-version", "7.4-preview.1");
    auto pRawResponse = m_pipeline->Send(request, context);
    auto httpStatusCode = pRawResponse->GetStatusCode();
    if (httpStatusCode != Azure::Core::Http::HttpStatusCode::Ok)
    {
      throw Azure::Core::RequestFailedException(pRawResponse);
    }
    SecretBundle response;
    {
      const auto& responseBody = pRawResponse->GetBody();
      auto jsonRoot
          = Azure::Core::Json::_internal::json::parse(responseBody.begin(), responseBody.end());
      response.value = jsonRoot["value"].get<std::string>();
      response.id = jsonRoot["id"].get<std::string>();
      response.contentType = jsonRoot["contentType"].get<std::string>();
      response.attributes.recoverableDays = jsonRoot["recoverableDays"].is_number_integer()
          ? jsonRoot["recoverableDays"].get<int32_t>()
          : std::stoi(jsonRoot["recoverableDays"].get<std::string>());
      response.attributes.recoveryLevel
          = DeletionRecoveryLevel(jsonRoot["recoveryLevel"].get<std::string>());
      response.kid = jsonRoot["kid"].get<std::string>();
      response.managed = jsonRoot["managed"].is_boolean()
          ? jsonRoot["managed"].get<bool>()
          : jsonRoot["managed"].get<std::string>() == std::string("true");
    }
    return Azure::Response<SecretBundle>(std::move(response), std::move(pRawResponse));
  }

  Azure::Response<SecretListResult> Client::GetSecrets(
      const GetSecretsOptions& options,
      const Azure::Core::Context& context)
  {
    auto url = m_url;
    url.AppendPath("secrets");
    url.SetQueryParameters({{"apiVersion", "7.4-preview.1"}});
    auto request = Azure::Core::Http::Request(Azure::Core::Http::HttpMethod::Get, url);
    if (options.maxresults.HasValue())
    {
      request.GetUrl().AppendQueryParameter(
          "maxresults", std::to_string(options.maxresults.Value()));
    }
    request.GetUrl().AppendQueryParameter("api-version", "7.4-preview.1");
    auto pRawResponse = m_pipeline->Send(request, context);
    auto httpStatusCode = pRawResponse->GetStatusCode();
    if (httpStatusCode != Azure::Core::Http::HttpStatusCode::Ok)
    {
      throw Azure::Core::RequestFailedException(pRawResponse);
    }
    SecretListResult response;
    {
      const auto& responseBody = pRawResponse->GetBody();
      auto jsonRoot
          = Azure::Core::Json::_internal::json::parse(responseBody.begin(), responseBody.end());
      for (const auto& var0 : jsonRoot.count("value") != 0 && jsonRoot["value"].is_array()
               ? jsonRoot["value"]
               : Azure::Core::Json::_internal::json::array())
      {
        SecretItem vectorElement2;
        vectorElement2.id = var0["id"].get<std::string>();
        vectorElement2.attributes.recoverableDays = var0["recoverableDays"].is_number_integer()
            ? var0["recoverableDays"].get<int32_t>()
            : std::stoi(var0["recoverableDays"].get<std::string>());
        vectorElement2.attributes.recoveryLevel
            = DeletionRecoveryLevel(var0["recoveryLevel"].get<std::string>());
        vectorElement2.contentType = var0["contentType"].get<std::string>();
        vectorElement2.managed = var0["managed"].is_boolean()
            ? var0["managed"].get<bool>()
            : var0["managed"].get<std::string>() == std::string("true");
        response.value.emplace_back(std::move(vectorElement2));
      }
      response.nextLink = jsonRoot["nextLink"].get<std::string>();
    }
    return Azure::Response<SecretListResult>(std::move(response), std::move(pRawResponse));
  }

  Azure::Response<SecretListResult> Client::GetSecretVersions(
      const GetSecretVersionsOptions& options,
      const Azure::Core::Context& context)
  {
    m_url.SetQueryParameters({{"apiVersion", "7.4-preview.1"}});
    auto request = Azure::Core::Http::Request(Azure::Core::Http::HttpMethod::Get, m_url);
    if (options.maxresults.HasValue())
    {
      request.GetUrl().AppendQueryParameter(
          "maxresults", std::to_string(options.maxresults.Value()));
    }
    request.GetUrl().AppendQueryParameter("api-version", "7.4-preview.1");
    auto pRawResponse = m_pipeline->Send(request, context);
    auto httpStatusCode = pRawResponse->GetStatusCode();
    if (httpStatusCode != Azure::Core::Http::HttpStatusCode::Ok)
    {
      throw Azure::Core::RequestFailedException(pRawResponse);
    }
    SecretListResult response;
    {
      const auto& responseBody = pRawResponse->GetBody();
      auto jsonRoot
          = Azure::Core::Json::_internal::json::parse(responseBody.begin(), responseBody.end());
      for (const auto& var0 : jsonRoot.count("value") != 0 && jsonRoot["value"].is_array()
               ? jsonRoot["value"]
               : Azure::Core::Json::_internal::json::array())
      {
        SecretItem vectorElement2;
        vectorElement2.id = var0["id"].get<std::string>();
        vectorElement2.attributes.recoverableDays = var0["recoverableDays"].is_number_integer()
            ? var0["recoverableDays"].get<int32_t>()
            : std::stoi(var0["recoverableDays"].get<std::string>());
        vectorElement2.attributes.recoveryLevel
            = DeletionRecoveryLevel(var0["recoveryLevel"].get<std::string>());
        vectorElement2.contentType = var0["contentType"].get<std::string>();
        vectorElement2.managed = var0["managed"].is_boolean()
            ? var0["managed"].get<bool>()
            : var0["managed"].get<std::string>() == std::string("true");
        response.value.emplace_back(std::move(vectorElement2));
      }
      response.nextLink = jsonRoot["nextLink"].get<std::string>();
    }
    return Azure::Response<SecretListResult>(std::move(response), std::move(pRawResponse));
  }

  Azure::Response<DeletedSecretListResult> Client::GetDeletedSecrets(
      const GetDeletedSecretsOptions& options,
      const Azure::Core::Context& context)
  {
    auto url = m_url;
    url.AppendPath("deletedsecrets");
    url.SetQueryParameters({{"apiVersion", "7.4-preview.1"}});
    auto request = Azure::Core::Http::Request(Azure::Core::Http::HttpMethod::Get, url);
    if (options.maxresults.HasValue())
    {
      request.GetUrl().AppendQueryParameter(
          "maxresults", std::to_string(options.maxresults.Value()));
    }
    request.GetUrl().AppendQueryParameter("api-version", "7.4-preview.1");
    auto pRawResponse = m_pipeline->Send(request, context);
    auto httpStatusCode = pRawResponse->GetStatusCode();
    if (httpStatusCode != Azure::Core::Http::HttpStatusCode::Ok)
    {
      throw Azure::Core::RequestFailedException(pRawResponse);
    }
    DeletedSecretListResult response;
    {
      const auto& responseBody = pRawResponse->GetBody();
      auto jsonRoot
          = Azure::Core::Json::_internal::json::parse(responseBody.begin(), responseBody.end());
      for (const auto& var0 : jsonRoot.count("value") != 0 && jsonRoot["value"].is_array()
               ? jsonRoot["value"]
               : Azure::Core::Json::_internal::json::array())
      {
        DeletedSecretItem vectorElement2;
        vectorElement2.recoveryId = var0["recoveryId"].get<std::string>();
        vectorElement2.scheduledPurgeDate
            = Azure::Core::_internal::PosixTimeConverter::PosixTimeToDateTime(
                std::stoll(var0["scheduledPurgeDate"].get<std::string>()));
        vectorElement2.deletedDate
            = Azure::Core::_internal::PosixTimeConverter::PosixTimeToDateTime(
                std::stoll(var0["deletedDate"].get<std::string>()));
        response.value.emplace_back(std::move(vectorElement2));
      }
      response.nextLink = jsonRoot["nextLink"].get<std::string>();
    }
    return Azure::Response<DeletedSecretListResult>(std::move(response), std::move(pRawResponse));
  }

  Azure::Response<DeletedSecretBundle> Client::GetDeletedSecret(const Azure::Core::Context& context)
  {
    m_url.SetQueryParameters({{"apiVersion", "7.4-preview.1"}});
    auto request = Azure::Core::Http::Request(Azure::Core::Http::HttpMethod::Get, m_url);
    request.GetUrl().AppendQueryParameter("api-version", "7.4-preview.1");
    auto pRawResponse = m_pipeline->Send(request, context);
    auto httpStatusCode = pRawResponse->GetStatusCode();
    if (httpStatusCode != Azure::Core::Http::HttpStatusCode::Ok)
    {
      throw Azure::Core::RequestFailedException(pRawResponse);
    }
    DeletedSecretBundle response;
    {
      const auto& responseBody = pRawResponse->GetBody();
      auto jsonRoot
          = Azure::Core::Json::_internal::json::parse(responseBody.begin(), responseBody.end());
      response.recoveryId = jsonRoot["recoveryId"].get<std::string>();
      response.scheduledPurgeDate = Azure::Core::_internal::PosixTimeConverter::PosixTimeToDateTime(
          std::stoll(jsonRoot["scheduledPurgeDate"].get<std::string>()));
      response.deletedDate = Azure::Core::_internal::PosixTimeConverter::PosixTimeToDateTime(
          std::stoll(jsonRoot["deletedDate"].get<std::string>()));
    }
    return Azure::Response<DeletedSecretBundle>(std::move(response), std::move(pRawResponse));
  }

  Azure::Response<PurgeDeletedSecretResult> Client::PurgeDeletedSecret(
      const Azure::Core::Context& context)
  {
    m_url.SetQueryParameters({{"apiVersion", "7.4-preview.1"}});
    auto request = Azure::Core::Http::Request(Azure::Core::Http::HttpMethod::Delete, m_url);
    request.GetUrl().AppendQueryParameter("api-version", "7.4-preview.1");
    auto pRawResponse = m_pipeline->Send(request, context);
    auto httpStatusCode = pRawResponse->GetStatusCode();
    if (httpStatusCode != Azure::Core::Http::HttpStatusCode::NoContent)
    {
      throw Azure::Core::RequestFailedException(pRawResponse);
    }
    PurgeDeletedSecretResult response;
    return Azure::Response<PurgeDeletedSecretResult>(std::move(response), std::move(pRawResponse));
  }

  Azure::Response<SecretBundle> Client::RecoverDeletedSecret(const Azure::Core::Context& context)
  {
    m_url.SetQueryParameters({{"apiVersion", "7.4-preview.1"}});
    auto request = Azure::Core::Http::Request(Azure::Core::Http::HttpMethod::Post, m_url);
    request.GetUrl().AppendQueryParameter("api-version", "7.4-preview.1");
    auto pRawResponse = m_pipeline->Send(request, context);
    auto httpStatusCode = pRawResponse->GetStatusCode();
    if (httpStatusCode != Azure::Core::Http::HttpStatusCode::Ok)
    {
      throw Azure::Core::RequestFailedException(pRawResponse);
    }
    SecretBundle response;
    {
      const auto& responseBody = pRawResponse->GetBody();
      auto jsonRoot
          = Azure::Core::Json::_internal::json::parse(responseBody.begin(), responseBody.end());
      response.value = jsonRoot["value"].get<std::string>();
      response.id = jsonRoot["id"].get<std::string>();
      response.contentType = jsonRoot["contentType"].get<std::string>();
      response.attributes.recoverableDays = jsonRoot["recoverableDays"].is_number_integer()
          ? jsonRoot["recoverableDays"].get<int32_t>()
          : std::stoi(jsonRoot["recoverableDays"].get<std::string>());
      response.attributes.recoveryLevel
          = DeletionRecoveryLevel(jsonRoot["recoveryLevel"].get<std::string>());
      response.kid = jsonRoot["kid"].get<std::string>();
      response.managed = jsonRoot["managed"].is_boolean()
          ? jsonRoot["managed"].get<bool>()
          : jsonRoot["managed"].get<std::string>() == std::string("true");
    }
    return Azure::Response<SecretBundle>(std::move(response), std::move(pRawResponse));
  }

  Azure::Response<BackupSecretResult> Client::BackupSecret(const Azure::Core::Context& context)
  {
    m_url.SetQueryParameters({{"apiVersion", "7.4-preview.1"}});
    auto request = Azure::Core::Http::Request(Azure::Core::Http::HttpMethod::Post, m_url);
    request.GetUrl().AppendQueryParameter("api-version", "7.4-preview.1");
    auto pRawResponse = m_pipeline->Send(request, context);
    auto httpStatusCode = pRawResponse->GetStatusCode();
    if (httpStatusCode != Azure::Core::Http::HttpStatusCode::Ok)
    {
      throw Azure::Core::RequestFailedException(pRawResponse);
    }
    BackupSecretResult response;
    {
      const auto& responseBody = pRawResponse->GetBody();
      auto jsonRoot
          = Azure::Core::Json::_internal::json::parse(responseBody.begin(), responseBody.end());
      response.value = Azure::Core::Convert::Base64Decode(jsonRoot["value"].get<std::string>());
    }
    return Azure::Response<BackupSecretResult>(std::move(response), std::move(pRawResponse));
  }

  Azure::Response<SecretBundle> Client::RestoreSecret(
      const RestoreSecretOptions& options,
      const Azure::Core::Context& context)
  {
    std::string jsonBody;
    {
      auto jsonRoot = Azure::Core::Json::_internal::json::object();
      jsonRoot["value"] = options.parameters.secretBundleBackup;
      jsonBody = jsonRoot.dump();
    }
    Azure::Core::IO::MemoryBodyStream requestBody(
        reinterpret_cast<const uint8_t*>(jsonBody.data()), jsonBody.length());
    auto url = m_url;
    url.AppendPath("secrets/restore");
    url.SetQueryParameters({{"apiVersion", "7.4-preview.1"}});
    auto request
        = Azure::Core::Http::Request(Azure::Core::Http::HttpMethod::Post, url, &requestBody);
    request.SetHeader("Content-Type", "application/json");
    request.SetHeader("Content-Length", std::to_string(requestBody.Length()));
    request.GetUrl().AppendQueryParameter("api-version", "7.4-preview.1");
    auto pRawResponse = m_pipeline->Send(request, context);
    auto httpStatusCode = pRawResponse->GetStatusCode();
    if (httpStatusCode != Azure::Core::Http::HttpStatusCode::Ok)
    {
      throw Azure::Core::RequestFailedException(pRawResponse);
    }
    SecretBundle response;
    {
      const auto& responseBody = pRawResponse->GetBody();
      auto jsonRoot
          = Azure::Core::Json::_internal::json::parse(responseBody.begin(), responseBody.end());
      response.value = jsonRoot["value"].get<std::string>();
      response.id = jsonRoot["id"].get<std::string>();
      response.contentType = jsonRoot["contentType"].get<std::string>();
      response.attributes.recoverableDays = jsonRoot["recoverableDays"].is_number_integer()
          ? jsonRoot["recoverableDays"].get<int32_t>()
          : std::stoi(jsonRoot["recoverableDays"].get<std::string>());
      response.attributes.recoveryLevel
          = DeletionRecoveryLevel(jsonRoot["recoveryLevel"].get<std::string>());
      response.kid = jsonRoot["kid"].get<std::string>();
      response.managed = jsonRoot["managed"].is_boolean()
          ? jsonRoot["managed"].get<bool>()
          : jsonRoot["managed"].get<std::string>() == std::string("true");
    }
    return Azure::Response<SecretBundle>(std::move(response), std::move(pRawResponse));
  }

}}}} // namespace Azure::Security::KeyVault::Administration