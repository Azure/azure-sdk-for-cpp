// Copyright (c) Microsoft Corporation. All rights reserved.
// SPDX-License-Identifier: MIT

/**
 * @file
 * @brief Defines the Azure Attestatoin API types.
 *
 */

#pragma once

#include "dll_import_export.hpp"

#include "azure/core/context.hpp"
#include "azure/core/http/http.hpp"
#include "azure/core/nullable.hpp"
#include "azure/core/paged_response.hpp"
#include "azure/core/response.hpp"
#include <iostream>
#include <memory>
#include <string>
#include <unordered_map>
#include <vector>

// cspell: words MRSIGNER MRENCLAVE
namespace Azure { namespace Security { namespace Attestation { namespace Models {
  /**
   * @brief Contains information about this instance of the attestation service, which can be used
   * to validate attestation service responses.
   *
   */
  struct AttestationOpenIdMetadata final
  {
    /// The issuer which will be used for tokens generated by this instance.
    std::string Issuer;

    /// A URI which can be used to retrieve the AttestationSigner
    /// objects returned by the attestation service.
    std::string JsonWebKeySetUrl;

    /// The response types that are supported by the service.
    std::vector<std::string> SupportedResponseTypes;

    /// The algorithms which can be used
    /// to sign attestation tokens.
    std::vector<std::string> SupportedTokenSigningAlgorithms;

    /// A list of claims which may be returned by the attestation service.
    std::vector<std::string> SupportedClaims;
  };

  /** @brief An AttestationSigner represents an X .509 certificate and KeyID pair.
   *
   * There are two use scenarios for an AttestationSigner:
   * -# The certificate in an AttestationSigner can be usedto sign a token generated
   * by the attestation service.
   * -# The certificate which is used to sign an attestation policy.
   */
  struct AttestationSigner final
  {
    /// The KeyID associated with the Certificate Chain.
    Azure::Nullable<std::string> KeyId;

    /// An array of PEM encoded X.509 certificates. The
    /// first certificate in the array
    /// will be used to sign an attestation token or policy.
    Azure::Nullable<std::vector<std::string>> CertificateChain;
  };

  /** @brief An AttestationResult reflects the result of an Attestation operation.
   *
   * The fields in the AttestationResult represent the claims in the AttestationToken returned by
   * the attestation service.
   */
  struct AttestationResult final
  {

    /// The nonce provided by the client in the attestation operation.
    Azure::Nullable<std::string> Nonce;

    /// The version of this attestation response.
    std::string Version;

    /// JSON encoded runtime claims - this will be the input RuntimeData
    /// parameter decoded and interpreted as JSON.
    Azure::Nullable<std::string> RuntimeClaims;

    /// InitTime claims - this will be the InitTimeData parameter
    /// decoded and interpreted as JSON.
    Azure::Nullable<std::string> InitTimeClaims;

    /// PolicyClaims - the JSON encoded values of all the claims created
    /// by attestation policies on this instance.
    Azure::Nullable<std::string> PolicyClaims;

    /// If the RuntimeData parameter is specified as being of
    /// {@link Models::DataType}::Binary, this will be the
    /// value of the RuntimeData input.
    Azure::Nullable<std::vector<uint8_t>> EnclaveHeldData;

    /// The verifier which generated this AttestationResult.
    std::string VerifierType;

    /// If the attestation policy is signed, this will be the signing chain used
    /// to sign the policy.
    Azure::Nullable<AttestationSigner> PolicySigner;

    /// The SHA256 hash of the policy which was used generating the
    /// attestation result.
    std::vector<uint8_t> PolicyHash;

    /// If present, reflects that the enclave being attestated can be debugged.
    Azure::Nullable<bool> IsDebuggable;

    /// If present, the ProductId for the enclave being attested.
    Azure::Nullable<int> ProductId{0};

    /// If present, the contents of the MRENCLAVE register for the SGX enclave being
    /// attested - this reflects the hash of the binary being run in the enclave.
    std::vector<uint8_t> MrEnclave;

    /// If present, the contents of the MRSIGNER register for the SGX
    /// enclave being attested - this reflects the key which was used
    /// to sign the enclave image being run in the enclave.
    std::vector<uint8_t> MrSigner;

    /// The security version number of the SGX enclave.
    Azure::Nullable<int> Svn;

    /// A JSON encoded string representing the collateral which was used
    /// to perform the attestation operation.
    std::string SgxCollateral;
  };

  /** @brief An AttestationTokenHeader represents common properties in an the RFC 7515 JSON Web
   * Token.
   */
  struct AttestationTokenHeader
  {
    /// The ""alg" token header property. See
    ///  <a href='https://datatracker.ietf.org/doc/html/rfc7515#section-4.1.1'>RFC 7515
    /// section 4.1.1</a>
    Azure::Nullable<std::string> Algorithm;

    /// The "kid" token header property See
    /// <a href='https://datatracker.ietf.org/doc/html/rfc7515#section-4.1.4'>RFC 7515
    /// section 4.1.4</a>
    Azure::Nullable<std::string> KeyId;

    /**
     * Returns the signer for this token if the caller provided a JSON Web Key.
     *
     * See <a href='https://datatracker.ietf.org/doc/html/rfc7515#section-4.1.3'>RFC 7515
     * section 4.1.3</a> for more information.
     *
     */
    Azure::Nullable<AttestationSigner> Key;

    /**
     * The "cty" header property of the JWS.
     *
     * See <a href='https://datatracker.ietf.org/doc/html/rfc7515#section-4.1.10'>RFC 7515
     * section 4.1.10</a> for more information.
     *
     */
    Azure::Nullable<std::string> ContentType;

    /**
     * A URI which can be used to retrieve a JSON Web Key which can verify the signature on
     * this token.
     *
     * See <a href='https://datatracker.ietf.org/doc/html/rfc7515#section-4.1.5'>RFC 7515
     * section 4.1.5</a> for more information.
     *
     */
    Azure::Nullable<std::string> KeyURL;

    /**
     * Returns the "crit" header property from the JSON Web Signature object.
     *
     * See <a href='https://datatracker.ietf.org/doc/html/rfc7515#section-4.1.11'>RFC 7515
     * section 4.1.11</a> for more information.
     *
     */
    Azure::Nullable<std::vector<std::string>> Critical;

    /**
     * Returns a URI which can be used to retrieve an X.509 certificate which can verify the
     * signature on this token.
     *
     * See <a href='https://datatracker.ietf.org/doc/html/rfc7515#section-4.1.5'>RFC 7515
     * section 4.1.5</a> for more information.
     *
     */
    Azure::Nullable<std::string> X509Url;

    /**
     * Returns the "typ" header property from the JWS.
     *
     * See <a href='https://datatracker.ietf.org/doc/html/rfc7515#section-4.1.9'>RFC 7515
     * section 4.1.9</a> for more information.
     *
     */
    Azure::Nullable<std::string> Type;

    /**
     * Returns the SHA-1 thumbprint of the leaf certificate in the getCertificateChain.
     *
     * See <a href='https://datatracker.ietf.org/doc/html/rfc7515#section-4.1.7'>RFC 7515
     * section 4.1.7</a> for more information.
     *
     */
    Azure::Nullable<std::string> CertificateThumbprint;

    /**
     * Returns the SHA-256 thumbprint of the leaf certificate in the getCertificateChain.
     *
     * See <a href='https://datatracker.ietf.org/doc/html/rfc7515#section-4.1.8'>RFC 7515
     * section 4.1.8</a> for more information.
     *
     */
    Azure::Nullable<std::string> CertificateSha256Thumbprint;

    /**
     * Returns the signing certificate chain as an AttestationSigner.
     *
     * See <a href='https://datatracker.ietf.org/doc/html/rfc7515#section-4.1.6'>RFC 7515
     * section 4.1.6</a> for more information.
     *
     */
    Azure::Nullable<std::vector<std::string>> X509CertificateChain;
  };

  /** An AttestationToken represents an RFC 7519 JSON Web Token returned from the attestation
   * service with the specialized body type.
   * <typeparam name="T"></typeparam> The type which represents the body of the attestation token.
   */
  template <typename T> class AttestationToken final {
  public:
    /// The full RFC 7515 token returned by the attestation service.
    std::string RawToken;

    /// The elements of the raw token which will be signed by the Signature.
    std::string SignedElements;

    /// Signature (if present) for the attestation token.
    std::vector<uint8_t> Signature;

    /// RFC 7515 header properties.
    AttestationTokenHeader Header;

    // RFC 7519 properties.

    /**
     *  The Expiration time for this attestation token.
     *
     * After this time, the token cannot be considered valid.
     *
     * See <a href='https://datatracker.ietf.org/doc/html/rfc7519#section-4.1.4'>RFC 7519
     * Section 4.1.4</a> for more information.
     */
    Azure::Nullable<Azure::DateTime> ExpiresOn;

    /**
     *  The time at which this token was issued.
     *
     *
     * See <a href='https://datatracker.ietf.org/doc/html/rfc7519#section-4.1.6'>RFC 7519
     * Section 4.1.6</a> for more information.
     */
    Azure::Nullable<Azure::DateTime> IssuedOn;

    /**
     *  The time before which this token cannot be considered valid.
     *
     *
     * See <a href='https://datatracker.ietf.org/doc/html/rfc7519#section-4.1.5'>RFC 7519
     * Section 4.1.5</a> for more information.
     */
    Azure::Nullable<Azure::DateTime> NotBefore;

    /**
     *  The issuer of this attestation token
     *
     *
     * See <a href='https://datatracker.ietf.org/doc/html/rfc7519#section-4.1.1'>RFC 7519
     * Section 4.1.1</a> for more information.
     */
    Azure::Nullable<std::string> Issuer;

    /**
     *  An identifier which uniquely identifies this token.
     *
     * See <a href='https://datatracker.ietf.org/doc/html/rfc7519#section-4.1.7'>RFC 7519
     * Section 4.1.7</a> for more information.
     */
    Azure::Nullable<std::string> UniqueIdentifier;

    /**
     * The subject for this attestation token.
     *
     * See <a href='https://datatracker.ietf.org/doc/html/rfc7519#section-4.1.2'>RFC 7519
     * Section 4.1.2</a> for more information.
     */
    Azure::Nullable<std::string> Subject;

    /**
     * The audience for this attestation token.
     *
     * See <a href='https://datatracker.ietf.org/doc/html/rfc7519#section-4.1.3'>RFC 7519
     * Section 4.1.3</a> for more information.
     */
    Azure::Nullable<std::string> Audience;

    /// The deserialized body of the attestation token.
    T Body;
  };
}}}} // namespace Azure::Security::Attestation::Models