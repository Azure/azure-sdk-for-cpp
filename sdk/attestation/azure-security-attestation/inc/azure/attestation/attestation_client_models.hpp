// Copyright (c) Microsoft Corporation. All rights reserved.
// SPDX-License-Identifier: MIT

/**
 * @file
 * @brief Defines the Azure Attestatoin API types.
 *
 */

#pragma once

#include "dll_import_export.hpp"

#include "azure/core/context.hpp"
#include "azure/core/http/http.hpp"
#include "azure/core/nullable.hpp"
#include "azure/core/paged_response.hpp"
#include "azure/core/response.hpp"
#include <iostream>
#include <memory>
#include <string>
#include <unordered_map>
#include <vector>

// cspell: words MRSIGNER MRENCLAVE
namespace Azure { namespace Security { namespace Attestation { namespace Models {
  /**
   * @brief Contains information about this instance of the attestation service, which can be used
   * to validate attestation service responses.
   *
   */
  struct AttestationOpenIdMetadata final
  {
    /// The issuer which will be used for tokens generated by this instance.
    std::string Issuer;

    /// A URI which can be used to retrieve the AttestationSigner
    /// objects returned by the attestation service.
    std::string JsonWebKeySetUrl;

    /// The response types that are supported by the service.
    std::vector<std::string> SupportedResponseTypes;

    /// The algorithms which can be used
    /// to sign attestation tokens.
    std::vector<std::string> SupportedTokenSigningAlgorithms;

    /// A list of claims which may be returned by the attestation service.
    std::vector<std::string> SupportedClaims;
  };

  /** @brief An AttestationSigner represents an X .509 certificate and KeyID pair.
   *
   * There are two use scenarios for an AttestationSigner:
   * -# The certificate in an AttestationSigner can be usedto sign a token generated
   * by the attestation service.
   * -# The certificate which is used to sign an attestation policy.
   */
  struct AttestationSigner final
  {
    /// The KeyID associated with the Certificate Chain.
    Azure::Nullable<std::string> KeyId;

    /// An array of PEM encoded X.509 certificates. The
    /// first certificate in the array
    /// will be used to sign an attestation token or policy.
    Azure::Nullable<std::vector<std::string>> CertificateChain;
  };

  /** @brief An AttestationResult reflects the result of an Attestation operation.
   *
   * The fields in the AttestationResult represent the claims in the AttestationToken returned by
   * the attestation service.
   */
  struct AttestationResult final
  {

    /// The nonce provided by the client in the attestation operation.
    Azure::Nullable<std::string> Nonce;

    /// The version of this attestation response.
    std::string Version;

    /// JSON encoded runtime claims - this will be the input RuntimeData
    /// parameter decoded and interpreted as JSON.
    Azure::Nullable<std::string> RuntimeClaims;

    /// InitTime claims - this will be the InitTimeData parameter
    /// decoded and interpreted as JSON.
    Azure::Nullable<std::string> InitTimeClaims;

    /// PolicyClaims - the JSON encoded values of all the claims created
    /// by attestation policies on this instance.
    Azure::Nullable<std::string> PolicyClaims;

    /// If the RuntimeData parameter is specified as being of
    /// {@link Models::DataType}::Binary, this will be the
    /// value of the RuntimeData input.
    Azure::Nullable<std::vector<uint8_t>> EnclaveHeldData;

    /// The verifier which generated this AttestationResult.
    std::string VerifierType;

    /// If the attestation policy is signed, this will be the signing chain used
    /// to sign the policy.
    Azure::Nullable<AttestationSigner> PolicySigner;

    /// The SHA256 hash of the policy which was used generating the
    /// attestation result.
    std::vector<uint8_t> PolicyHash;

    /// If present, reflects that the enclave being attestated can be debugged.
    Azure::Nullable<bool> IsDebuggable;

    /// If present, the ProductId for the enclave being attested.
    Azure::Nullable<int> ProductId{0};

    /// If present, the contents of the MRENCLAVE register for the SGX enclave being
    /// attested - this reflects the hash of the binary being run in the enclave.
    std::vector<uint8_t> MrEnclave;

    /// If present, the contents of the MRSIGNER register for the SGX
    /// enclave being attested - this reflects the key which was used
    /// to sign the enclave image being run in the enclave.
    std::vector<uint8_t> MrSigner;

    /// The security version number of the SGX enclave.
    Azure::Nullable<int> Svn;

    /// A JSON encoded string representing the collateral which was used
    /// to perform the attestation operation.
    std::string SgxCollateral;
  };

}}}} // namespace Azure::Security::Attestation::Models