/* Copyright (c) Microsoft Corp. All Rights Reserved.
  * Licensed under the MIT License.
  **/
 // cspell: words cbindgen amqp amqpvalue

 #pragma once
 

/* Warning, this file is autogenerated by cbindgen. Don't modify this manually. */

#include <cstdarg>
#include <cstdint>
#include <cstdlib>
#include <ostream>
#include <new>

namespace Azure {
namespace Core {
namespace Amqp {
namespace _detail {
namespace RustInterop {

enum class AmqpValueType {
  AmqpValueInvalid,
  AmqpValueNull,
  AmqpValueBoolean,
  AmqpValueUByte,
  AmqpValueUShort,
  AmqpValueUint,
  AmqpValueUlong,
  AmqpValueByte,
  AmqpValueShort,
  AmqpValueInt,
  AmqpValueLong,
  AmqpValueFloat,
  AmqpValueDouble,
  AmqpValueChar,
  AmqpValueTimestamp,
  AmqpValueUuid,
  AmqpValueBinary,
  AmqpValueString,
  AmqpValueSymbol,
  AmqpValueList,
  AmqpValueMap,
  AmqpValueArray,
  AmqpValueComposite,
  AmqpValueDescribed,
  AmqpValueUnknown,
};

struct AmqpValue;

extern "C" {

void rust_string_delete(char *rust_string);

AmqpValueType amqpvalue_get_type(const AmqpValue *value);

AmqpValue *amqpvalue_clone(AmqpValue *value);

void amqpvalue_destroy(AmqpValue *value);

bool amqpvalue_are_equal(const AmqpValue *value1, const AmqpValue *value2);

char *amqpvalue_to_string(const AmqpValue *value);

AmqpValue *amqpvalue_create_null();

AmqpValue *amqpvalue_create_boolean(bool bool_value);

int32_t amqpvalue_get_boolean(const AmqpValue *value, bool *bool_value);

AmqpValue *amqpvalue_create_ubyte(uint8_t ubyte_value);

int32_t amqpvalue_get_ubyte(const AmqpValue *value, uint8_t *ubyte_value);

AmqpValue *amqpvalue_create_byte(int8_t byte_value);

int32_t amqpvalue_get_byte(const AmqpValue *value, int8_t *byte_value);

AmqpValue *amqpvalue_create_ushort(uint16_t ushort_value);

int32_t amqpvalue_get_ushort(const AmqpValue *value, uint16_t *ushort_value);

AmqpValue *amqpvalue_create_short(int16_t short_value);

int32_t amqpvalue_get_short(const AmqpValue *value, int16_t *short_value);

AmqpValue *amqpvalue_create_uint(uint32_t uint_value);

int32_t amqpvalue_get_uint(const AmqpValue *value, uint32_t *uint_value);

AmqpValue *amqpvalue_create_int(int32_t int_value);

int32_t amqpvalue_get_int(const AmqpValue *value, int32_t *int_value);

AmqpValue *amqpvalue_create_ulong(uint64_t ulong_value);

int32_t amqpvalue_get_ulong(const AmqpValue *value, uint64_t *ulong_value);

AmqpValue *amqpvalue_create_long(int64_t long_value);

int32_t amqpvalue_get_long(const AmqpValue *value, int64_t *long_value);

AmqpValue *amqpvalue_create_float(float float_value);

int32_t amqpvalue_get_float(const AmqpValue *value, float *float_value);

AmqpValue *amqpvalue_create_double(double double_value);

int32_t amqpvalue_get_double(const AmqpValue *value, double *double_value);

AmqpValue *amqpvalue_create_char(uint32_t char_value);

int32_t amqpvalue_get_char(const AmqpValue *value, uint32_t *char_value);

AmqpValue *amqpvalue_create_timestamp(uint64_t timestamp_value);

int32_t amqpvalue_get_timestamp(const AmqpValue *value, int64_t *timestamp_value);

AmqpValue *amqpvalue_create_uuid(const uint8_t (*uuid_value)[16]);

int32_t amqpvalue_get_uuid(const AmqpValue *value, uint8_t (*uuid_value)[16]);

AmqpValue *amqpvalue_create_string(const char *string_value);

int32_t amqpvalue_get_string(const AmqpValue *value, const char **string_value);

AmqpValue *amqpvalue_create_symbol(const char *symbol_value);

int32_t amqpvalue_get_symbol(const AmqpValue *value, const char **symbol_value);

AmqpValue *amqpvalue_create_binary(const uint8_t *binary_value, uint32_t size);

int32_t amqpvalue_get_binary(const AmqpValue *value, const uint8_t **binary_value, uint32_t *size);

AmqpValue *amqpvalue_create_array();

int32_t amqpvalue_add_array_item(AmqpValue *value, AmqpValue *array_item_value);

AmqpValue *amqpvalue_get_array_item(const AmqpValue *value, uint32_t index);

int32_t amqpvalue_get_array_item_count(const AmqpValue *value, uint32_t *count);

AmqpValue *amqpvalue_create_list();

int32_t amqpvalue_add_list_item(AmqpValue *value, AmqpValue *list_item_value);

AmqpValue *amqpvalue_get_list_item(const AmqpValue *value, uint32_t index);

int32_t amqpvalue_get_list_item_count(const AmqpValue *value, uint32_t *count);

int32_t amqpvalue_set_list_item_count(AmqpValue *value, uint32_t count);

int32_t amqpvalue_set_list_item(AmqpValue *value, uint32_t index, AmqpValue *list_item_value);

AmqpValue *amqpvalue_create_map();

int32_t amqpvalue_add_map_item(AmqpValue *value, AmqpValue *key, AmqpValue *map_item_value);

int32_t amqpvalue_set_map_value(AmqpValue *value, AmqpValue *key, AmqpValue *map_item_value);

AmqpValue *amqpvalue_get_map_item(const AmqpValue *value, AmqpValue *key);

int32_t amqpvalue_get_map_key_value_pair(const AmqpValue *value,
                                         uint32_t index,
                                         AmqpValue **key,
                                         AmqpValue **map_item_value);

int32_t amqpvalue_get_map_pair_count(const AmqpValue *value, uint32_t *count);

AmqpValue *amqpvalue_create_described(const AmqpValue *descriptor, const AmqpValue *value);

int32_t amqpvalue_get_inplace_descriptor(const AmqpValue *value, AmqpValue **descriptor);

int32_t amqpvalue_get_inplace_described_value(const AmqpValue *value, AmqpValue **described_value);

AmqpValue *amqpvalue_create_composite(const AmqpValue *descriptor, uintptr_t size);

int32_t amqpvalue_set_composite_item(AmqpValue *value, uint32_t index, AmqpValue *composite_item);

int32_t amqpvalue_get_composite_item_count(const AmqpValue *value, uint32_t *count);

int32_t amqpvalue_get_composite_item_in_place(const AmqpValue *value,
                                              uint32_t index,
                                              AmqpValue **composite_item);

} // extern "C"

} // namespace RustInterop
} // namespace _detail
} // namespace Amqp
} // namespace Core
} // namespace Azure
