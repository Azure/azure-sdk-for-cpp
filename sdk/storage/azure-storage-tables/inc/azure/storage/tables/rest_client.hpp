// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

#pragma once

#include <azure/core/context.hpp>
#include <azure/core/datetime.hpp>
#include <azure/core/internal/extendable_enumeration.hpp>
#include <azure/core/internal/http/pipeline.hpp>
#include <azure/core/nullable.hpp>
#include <azure/core/response.hpp>
#include <azure/core/url.hpp>
#include <azure/storage/tables/dll_import_export.hpp>
#include <azure/storage/tables/rest_client.hpp>
#include <azure/storage/tables/rtti.hpp>

#include <cstdint>
#include <memory>
#include <string>
#include <utility>
#include <vector>

namespace Azure { namespace Storage { namespace Tables {
  class AllowedMethods final : public Core::_internal::ExtendableEnumeration<AllowedMethods> {
  public:
    AllowedMethods() = default;

    explicit AllowedMethods(std::string allowedMethods)
        : ExtendableEnumeration(std::move(allowedMethods))
    {
    }

    static AllowedMethods const Delete;
    static AllowedMethods const Get;
    static AllowedMethods const Head;
    static AllowedMethods const Merge;
    static AllowedMethods const Post;
    static AllowedMethods const Options;
    static AllowedMethods const Put;
    static AllowedMethods const Patch;
    static AllowedMethods const Connect;
    static AllowedMethods const Trace;
  };
  struct CorsRule final
  {
    std::vector<std::string> AllowedOrigins;
    std::vector<AllowedMethods> AllowedMethods;
    std::int32_t MaxAgeInSeconds = 0;
    std::vector<std::string> ExposedHeaders;
    std::vector<std::string> AllowedHeaders;
  };
  struct CorsRules final
  {
    std::vector<CorsRule> CorsRules;
  };

  struct TableServicePropertiesProperties final
  {
    CorsRules Cors;
  };
  struct TableServiceProperties final
  {
    TableServicePropertiesProperties Properties;
  };
  struct ListTableServices final
  {
    std::vector<TableServiceProperties> Value;
  };

  struct ListOptions final
  {
    std::string ResourceGroupName;
    std::string AccountName;
  };

  struct SetServicePropertiesOptions final
  {
    std::string ResourceGroupName;
    std::string AccountName;
    TableServiceProperties Parameters;
  };

  struct GetServicePropertiesOptions final
  {
    std::string ResourceGroupName;
    std::string AccountName;
  };
  struct TableAccessPolicy final
  {
    Nullable<DateTime> StartTime;
    Nullable<DateTime> ExpiryTime;
    std::string Permission;
  };
  struct TableSignedIdentifier final
  {
    std::string Id;
    TableAccessPolicy AccessPolicy;
  };
  struct TableProperties final
  {
    std::string TableName;
    std::vector<TableSignedIdentifier> SignedIdentifiers;
  };
  struct Table final
  {
    TableProperties Properties;
  };

  struct CreateOptions final
  {
    std::string ResourceGroupName;
    std::string AccountName;
    std::string TableName;
    Table Parameters;
  };

  struct UpdateOptions final
  {
    std::string ResourceGroupName;
    std::string AccountName;
    std::string TableName;
    Table Parameters;
  };

  struct GetOptions final
  {
    std::string ResourceGroupName;
    std::string AccountName;
    std::string TableName;
  };

  struct DeleteResult final
  {
  };

  struct DeleteOptions final
  {
    std::string ResourceGroupName;
    std::string AccountName;
    std::string TableName;
  };

  struct ListTableResource final
  {
    std::vector<Table> Value;
    std::string NextLink;
  };

  class TableServicesClient final {
  public:
    explicit TableServicesClient(std::string subscriptionId);

    Response<ListTableServices> List(
        ListOptions const& options = {},
        Core::Context const& context = {});

    Response<TableServiceProperties> SetServiceProperties(
        SetServicePropertiesOptions const& options = {},
        Core::Context const& context = {});

    Response<TableServiceProperties> GetServiceProperties(
        GetServicePropertiesOptions const& options = {},
        Core::Context const& context = {});

  private:
    std::shared_ptr<Core::Http::_internal::HttpPipeline> m_pipeline;
    Core::Url m_url;
    std::string m_subscriptionId;
  };

  class TableClient final {
  public:
    explicit TableClient(std::string subscriptionId);

    Response<Table> Create(CreateOptions const& options = {}, Core::Context const& context = {});

    Response<Table> Update(UpdateOptions const& options = {}, Core::Context const& context = {});

    Response<Table> Get(GetOptions const& options = {}, Core::Context const& context = {});

    Response<DeleteResult> Delete(
        DeleteOptions const& options = {},
        Core::Context const& context = {});

    Response<ListTableResource> List(
        ListOptions const& options = {},
        Core::Context const& context = {});

  private:
    std::shared_ptr<Core::Http::_internal::HttpPipeline> m_pipeline;
    Core::Url m_url;
    std::string m_subscriptionId;
  };
}}} // namespace Azure::Storage::Tables
