// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

#pragma once

#include <azure/core/context.hpp>
#include <azure/core/credentials/credentials.hpp>
#include <azure/core/http/http.hpp>
#include <azure/core/http/policies/policy.hpp>
#include <azure/core/internal/http/pipeline.hpp>
#include <azure/core/internal/json/json.hpp>
#include <azure/core/response.hpp>
#include <azure/core/url.hpp>
#include <azure/storage/common/crypt.hpp>
#include <azure/storage/common/internal/constants.hpp>
#include <azure/storage/common/internal/shared_key_policy_lite.hpp>
#include <azure/storage/common/internal/storage_bearer_token_auth.hpp>
#include <azure/storage/common/internal/storage_per_retry_policy.hpp>
#include <azure/storage/common/internal/storage_service_version_policy.hpp>
#include <azure/storage/common/internal/storage_switch_to_secondary_policy.hpp>
#include <azure/storage/common/storage_common.hpp>
#include <azure/storage/common/storage_credential.hpp>
#include <azure/storage/tables/dll_import_export.hpp>
#include <azure/storage/tables/models.hpp>
#include <azure/storage/tables/rest_client.hpp>
#include <azure/storage/tables/rtti.hpp>
#include <azure/storage/tables/transactions.hpp>

#include <cstdint>
#include <memory>
#include <string>
#include <utility>
#include <vector>

namespace Azure { namespace Storage { namespace Tables {
  class Serializers final {
  public:
    static std::string const CreateEntity(Models::TableEntity const& tableEntity)
    {
      std::string jsonBody;
      {
        auto jsonRoot = Core::Json::_internal::json::object();

        jsonRoot["PartitionKey"] = tableEntity.PartitionKey;
        jsonRoot["RowKey"] = tableEntity.RowKey;
        for (auto entry : tableEntity.Properties)
        {
          jsonRoot[entry.first] = entry.second;
        }

        jsonBody = jsonRoot.dump();
      }
      return jsonBody;
    }

    static std::string const MergeEntity(Models::TableEntity const& tableEntity)
    {
      std::string jsonBody;
      {
        auto jsonRoot = Core::Json::_internal::json::object();

        jsonRoot["PartitionKey"] = tableEntity.PartitionKey;
        jsonRoot["RowKey"] = tableEntity.RowKey;
        for (auto entry : tableEntity.Properties)
        {
          jsonRoot[entry.first] = entry.second;
        }

        jsonBody = jsonRoot.dump();
      }
      return jsonBody;
    }

    static std::string const UpdateEntity(Models::TableEntity const& tableEntity)
    {
      std::string jsonBody;
      {
        auto jsonRoot = Core::Json::_internal::json::object();

        jsonRoot["PartitionKey"] = tableEntity.PartitionKey;
        jsonRoot["RowKey"] = tableEntity.RowKey;
        for (auto entry : tableEntity.Properties)
        {
          jsonRoot[entry.first] = entry.second;
        }

        jsonBody = jsonRoot.dump();
      }
	  return jsonBody;
	}
  };
}}} // namespace Azure::Storage::Tables