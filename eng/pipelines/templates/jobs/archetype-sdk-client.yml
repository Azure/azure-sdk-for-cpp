parameters:
  Artifacts: []
  ServiceDirectory: not-specified
  BuildReleaseArtifacts: true

jobs:
- job: Validate
  strategy:
    matrix:
      Linux_x64:
        vm.image: 'ubuntu-18.04'
        vcpkg.deps: 'curl[ssl] libxml2 openssl'
        VCPKG_DEFAULT_TRIPLET: 'x64-linux'
      Win_x86:
        vm.image: 'windows-2019'
        vcpkg.deps: 'curl[winssl] libxml2'
        VCPKG_DEFAULT_TRIPLET: 'x86-windows-static'
        CMAKE_GENERATOR: 'Visual Studio 16 2019'
        CMAKE_GENERATOR_PLATFORM: Win32
      Win_x64:
        vm.image: 'windows-2019'
        vcpkg.deps: 'curl[winssl] libxml2'
        VCPKG_DEFAULT_TRIPLET: 'x64-windows-static'
        CMAKE_GENERATOR: 'Visual Studio 16 2019'
        CMAKE_GENERATOR_PLATFORM: x64
      MacOS_x64:
       vm.image: 'macOS-10.14'
       vcpkg.deps: 'curl[ssl] libxml2 openssl'
       VCPKG_DEFAULT_TRIPLET: 'x64-osx'

      # Unit testing ON
      Linux_x64_with_unit_test:
        vm.image: 'ubuntu-18.04'
        vcpkg.deps: 'curl[ssl] libxml2 openssl'
        VCPKG_DEFAULT_TRIPLET: 'x64-linux'
        build.args: ' -DBUILD_TESTING=ON'
      Win_x86_with_unit_test:
        vm.image: 'windows-2019'
        vcpkg.deps: 'curl[winssl] libxml2'
        VCPKG_DEFAULT_TRIPLET: 'x86-windows-static'
        CMAKE_GENERATOR: 'Visual Studio 16 2019'
        CMAKE_GENERATOR_PLATFORM: Win32
        build.args: ' -DBUILD_TESTING=ON'
      Win_x64_with_unit_test:
        vm.image: 'windows-2019'
        vcpkg.deps: 'curl[winssl] libxml2'
        VCPKG_DEFAULT_TRIPLET: 'x64-windows-static'
        CMAKE_GENERATOR: 'Visual Studio 16 2019'
        CMAKE_GENERATOR_PLATFORM: x64
        build.args: ' -DBUILD_TESTING=ON'
      MacOS_x64_with_unit_test:
       vm.image: 'macOS-10.14'
       vcpkg.deps: 'curl[ssl] libxml2 openssl'
       VCPKG_DEFAULT_TRIPLET: 'x64-osx'
       build.args: ' -DBUILD_TESTING=ON'
  pool:
    vmImage: $(vm.image)
  variables:
    CMOCKA_XML_FILE: "%g-test-results.xml"
    CMOCKA_MESSAGE_OUTPUT: "xml"

  steps:
  - checkout: self
    submodules: recursive

  # Mac OS specific requirements
  - task: Bash@3
    inputs:
      targetType: inline
      script: |
        sudo xcode-select --switch /Applications/Xcode_11.3.1.app
        echo "xcode path:"
        sudo xcode-select --print-path

        # Install gcc 9
        brew install gcc@9
        gcc --version

        git clone https://github.com/Microsoft/vcpkg.git
        cd vcpkg
        git rev-parse --verify HEAD
        git status

        ./bootstrap-vcpkg.sh

        # Validate that vcpkg bootstrap succeeded
        ./vcpkg version
        if [ $? -ne 0 ]
        then
          echo "./bootstrap-vcpkg.sh FAILED"
          exit 1
        fi

        echo "##vso[task.prependpath]$(pwd)"
        echo "##vso[task.setvariable variable=VCPKG_INSTALLATION_ROOT;]$(pwd)"

    # Execute only for Mac and if there is at least one dependency to be installed
    condition: and(succeeded(), contains(variables['vm.image'], 'macOS'), not(eq(variables['vcpkg.deps'], '')))
    displayName: vcpkg bootstrap


  - script: |
      vcpkg install $(vcpkg.deps)
    displayName: vcpkg install dependencies
    # Execute only if there is at least one dependency to be installed
    condition: and(succeeded(), not(eq(variables['vcpkg.deps'], '')))

  - script: mkdir build
    displayName: create working directory

  - script: cmake --version
    workingDirectory: build
    displayName: cmake --version

  - script: cmake ${{ parameters.BuildArgs }} ..
    workingDirectory: build
    displayName: cmake generate

  - script: cmake --build .
    workingDirectory: build
    displayName: cmake build

  - script: |
      ctest -V
    workingDirectory: build
    displayName: ctest

# Disable build for cpp - client 
- ${{ if ne(parameters.ServiceDirectory, 'not-specified' )}}:
  - job: GenerateReleaseArtifacts
    pool:
      vmImage: windows-2019
    steps:
      # Generate package spec JSON files for tagging the repo
      - ${{ each artifact in parameters.Artifacts }}:
          - pwsh: >-
              New-Item
              -ItemType directory
              -Path $(Build.ArtifactStagingDirectory)
              -Name packages/${{ artifact.Name }}
            displayName: Create package info artifact location

          - pwsh: |
              $outputPath = Join-Path -Path $(Build.ArtifactStagingDirectory) packages/${{ artifact.Name }}/package-info.json
              $version = Get-Content -Path sdk/${{ parameters.ServiceDirectory }}/${{ artifact.Path }}/version.txt
              $outputObject = @{ version = $version.ToString(); name = '${{ artifact.Name }}' } | ConvertTo-Json

              Set-Content -Path $outputPath -Value $outputObject
            displayName: Create package info JSON file

          - pwsh: |
              $outputPath = Join-Path -Path $(Build.ArtifactStagingDirectory) packages/${{ artifact.Name }}
              $changelogPath = "sdk/${{ parameters.ServiceDirectory }}/${{ artifact.Path }}/CHANGELOG.md"

              if (Test-Path $changeLogPath) {
                Copy-Item sdk/${{ parameters.ServiceDirectory }}/${{ artifact.Path }}/CHANGELOG.md $outputPath
              } else {
                Write-Warning "$changeLogPath does not exist"
              }
            displayName: Copy CHANGELOG.md to package artifact

          - task: PublishPipelineArtifact@1
            inputs:
              artifactName: packages
              path: $(Build.ArtifactStagingDirectory)/packages
