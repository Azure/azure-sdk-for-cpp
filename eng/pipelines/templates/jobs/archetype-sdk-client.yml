parameters:
  Artifacts: []
  ServiceDirectory: not-specified
  CtestRegex: .*
  BuildReleaseArtifacts: true

jobs:
- job: Validate
  condition: and(succeededOrFailed(), ne(variables['Skip.Test'], 'true'))
  strategy:
    matrix:
      Linux_x64:
        OSVmImage: 'ubuntu-18.04'
        VcpkgInstall: 'curl[ssl] libxml2 openssl'
        VCPKG_DEFAULT_TRIPLET: 'x64-linux'
      Win_x86:
        OSVmImage: 'windows-2019'
        VcpkgInstall: 'curl[winssl] libxml2'
        VCPKG_DEFAULT_TRIPLET: 'x86-windows-static'
        CMAKE_GENERATOR: 'Visual Studio 16 2019'
        CMAKE_GENERATOR_PLATFORM: Win32
      Win_x64:
        OSVmImage: 'windows-2019'
        VcpkgInstall: 'curl[winssl] libxml2'
        VCPKG_DEFAULT_TRIPLET: 'x64-windows-static'
        CMAKE_GENERATOR: 'Visual Studio 16 2019'
        CMAKE_GENERATOR_PLATFORM: x64
      MacOS_x64:
       OSVmImage: 'macOS-10.14'
       VcpkgInstall: 'curl[ssl] libxml2 openssl'
       VCPKG_DEFAULT_TRIPLET: 'x64-osx'

      # Unit testing ON
      Linux_x64_with_unit_test:
        OSVmImage: 'ubuntu-18.04'
        VcpkgInstall: 'curl[ssl] libxml2 openssl'
        VCPKG_DEFAULT_TRIPLET: 'x64-linux'
        CmakeArgs: ' -DBUILD_TESTING=ON'
      Win_x86_with_unit_test:
        OSVmImage: 'windows-2019'
        VcpkgInstall: 'curl[winssl] libxml2'
        VCPKG_DEFAULT_TRIPLET: 'x86-windows-static'
        CMAKE_GENERATOR: 'Visual Studio 16 2019'
        CMAKE_GENERATOR_PLATFORM: Win32
        CmakeArgs: ' -DBUILD_TESTING=ON'
      Win_x64_with_unit_test:
        OSVmImage: 'windows-2019'
        VcpkgInstall: 'curl[winssl] libxml2'
        VCPKG_DEFAULT_TRIPLET: 'x64-windows-static'
        CMAKE_GENERATOR: 'Visual Studio 16 2019'
        CMAKE_GENERATOR_PLATFORM: x64
        CmakeArgs: ' -DBUILD_TESTING=ON'
      MacOS_x64_with_unit_test:
        OSVmImage: 'macOS-10.14'
        VcpkgInstall: 'curl[ssl] libxml2 openssl'
        VCPKG_DEFAULT_TRIPLET: 'x64-osx'
        CmakeArgs: ' -DBUILD_TESTING=ON'
  pool:
    vmImage: $(OSVmImage)
  variables:
    CMOCKA_XML_FILE: "%g-test-results.xml"
    CMOCKA_MESSAGE_OUTPUT: "xml"

  steps:
  - checkout: self
    submodules: recursive

  - template: /eng/pipelines/templates/steps/vcpkg.yml
    parameters:
      DependenciesVariableName: VcpkgInstall

  - template: /eng/pipelines/templates/steps/cmake-build.yml
    parameters:
      GenerateArgs: $(CmakeArgs)

  - script: ctest -V --tests-regex ${{ parameters.CtestRegex }}
    workingDirectory: build
    displayName: ctest

# Disable build for cpp - client
- ${{ if ne(parameters.ServiceDirectory, 'not-specified' )}}:
  - job: GenerateReleaseArtifacts
    pool:
      vmImage: windows-2019
    variables:
      VcpkgDependencies: curl[winssl] libxml2
      VCPKG_DEFAULT_TRIPLET: 'x64-windows-static'
    steps:
      - pwsh: |
          $setupFile="doxygen-1.8.18-setup.exe";

          Invoke-WebRequest `
            -MaximumRetryCount 10 `
            -Uri "https://azuresdktooling.blob.core.windows.net/dependencies/$setupFile" `
            -OutFile $setupFile `
          | Wait-Process;

          Start-Process -Filepath .\$setupFile -ArgumentList @("/VERYSILENT") -Wait
        workingDirectory: $(Agent.TempDirectory)
        displayName: Download and Install Doxygen

      # Install dependencies required for build from vcpkg
      # TODO: We should be able to generate docs without having to install these
      # prerequisites:
      - template: /eng/pipelines/templates/steps/vcpkg.yml
        parameters:
          DependenciesVariableName: VcpkgDependencies

      - template: /eng/pipelines/templates/steps/cmake-build.yml
        parameters:
          Build: false
          GenerateArgs: >-
            -DINSTALL_GTEST=OFF
            -DBUILD_TESTING=OFF
            -DBUILD_CURL_TRANSPORT=OFF
            -DBUILD_DOCUMENTATION=YES

      # Generate package spec JSON files for tagging the repo
      - ${{ each artifact in parameters.Artifacts }}:
          - pwsh: >-
              New-Item
              -ItemType directory
              -Path $(Build.ArtifactStagingDirectory)
              -Name packages/${{ artifact.Name }}
            displayName: Create package info artifact location

          - pwsh: |
              $outputPath = Join-Path -Path $(Build.ArtifactStagingDirectory) packages/${{ artifact.Name }}/package-info.json

              # TODO: Read version from a .h file instead of version.txt
              $version = Get-Content -Path sdk/${{ parameters.ServiceDirectory }}/${{ artifact.Path }}/version.txt
              $outputObject = @{ version = $version.ToString(); name = '${{ artifact.Name }}' } | ConvertTo-Json

              Set-Content -Path $outputPath -Value $outputObject

              # Set AZURE_SDK_VERSION for use in Doxygen generation
              Write-Host "##vso[task.setvariable variable=AZURE_SDK_VERSION]$version"
            displayName: Create package info JSON file

          - pwsh: |
              $outputPath = Join-Path -Path $(Build.ArtifactStagingDirectory) packages/${{ artifact.Name }}
              $changelogPath = "sdk/${{ parameters.ServiceDirectory }}/${{ artifact.Path }}/CHANGELOG.md"

              if (Test-Path $changeLogPath) {
                Copy-Item sdk/${{ parameters.ServiceDirectory }}/${{ artifact.Path }}/CHANGELOG.md $outputPath
              } else {
                Write-Warning "$changeLogPath does not exist"
              }
            displayName: Copy CHANGELOG.md to package artifact

          - task: PublishPipelineArtifact@1
            inputs:
              artifactName: packages
              path: $(Build.ArtifactStagingDirectory)/packages

          - script: cmake --build . --target ${{ artifact.Name }}-docs
            workingDirectory: build
            displayName: Generate docs (${{ artifact.Name }}-docs)

          - pwsh: New-Item -ItemType directory -Path $(Build.ArtifactStagingDirectory) -Name docs/${{ artifact.Name }}
            displayName: Create doc artifact location

          - task: CopyFiles@2
            inputs:
              sourceFolder: $(Build.ArtifactStagingDirectory)/packages/${{ artifact.Name }}/package-info.json
              targetFolder: build/sdk/${{ parameters.ServiceDirectory }}/${{ artifact.Path }}/docs/html
            displayName: Copy package-info.json to documentation path

          - task: CopyFiles@2
            inputs:
              sourceFolder: build/sdk/${{ parameters.ServiceDirectory }}/${{ artifact.Path }}/docs/html
              targetFolder: $(Build.ArtifactStagingDirectory)/docs/${{ artifact.Name }}
            displayName: Copy documentation to artifact staging directory

      # After all docs artifacts are generated publis docs artifacts
      - task: PublishPipelineArtifact@1
        inputs:
          artifactName: docs
          path: $(Build.ArtifactStagingDirectory)/docs
