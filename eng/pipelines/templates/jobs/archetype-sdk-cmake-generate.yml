parameters:
  - name: Artifacts
    type: object
    default: []
  - name: ServiceDirectory
    type: string
    default: not-specified
  - name: CMakeTestOptions
    type: object
    default: []

jobs:
- job: CMakeGenerate
  condition: and(succeededOrFailed(), ne(variables['Skip.CMakeGenerate'], 'true'))
  strategy:
    matrix:
      Linux:
        Pool: azsdk-pool-mms-ubuntu-1804-general
        OSVmImage: MMSUbuntu18.04
        CmakeEnvArg: ''
        AptDependencies: 'libcurl4-openssl-dev'
      Windows:
        Pool: azsdk-pool-mms-win-2019-general
        OSVmImage: MMS2019
        CmakeEnvArg: ''
      Mac:
        Pool: Azure Pipelines
        OSVmImage: macOS-10.15
        CmakeEnvArg: ''
        VcpkgInstall: 'curl[ssl] openssl'
        VCPKG_DEFAULT_TRIPLET: 'x64-osx'
  pool:
    name: $(Pool)
    vmImage: $(OSVmImage)
  variables:
    CMOCKA_XML_FILE: "%g-test-results.xml"

  steps:
  - checkout: self
    submodules: recursive

  - template: /eng/common/pipelines/templates/steps/verify-agent-os.yml
    parameters:
      AgentImage: $(OSVmImage)

  - template: /eng/common/pipelines/templates/steps/bypass-local-dns.yml

  - pwsh: sudo apt update && sudo apt install -y $(AptDependencies)
    condition: and(succeeded(), ne(variables['AptDependencies'], ''))
    displayName: Install dependencies from apt

  - template: /eng/pipelines/templates/steps/vcpkg.yml
    parameters:
      DependenciesVariableName: VcpkgInstall

  - script: cmake --version
    displayName: cmake --version

  - ${{ each artifact in parameters.Artifacts }}:
    - ${{ each cmakeOption in parameters.CMakeTestOptions }}:
      - template: /eng/pipelines/templates/steps/cmake-generate.yml
        parameters:
          CmakeGeneratePath: sdk/${{ parameters.ServiceDirectory }}/${{ artifact.Path }}
          GenerateArgs: ${{ cmakeOption.Value }}
          Env: "$(CmakeEnvArg)"
