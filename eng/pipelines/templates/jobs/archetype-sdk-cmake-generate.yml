jobs:
- job: CMakeGenerate
  condition: and(succeededOrFailed(), ne(variables['Skip.CMakeGenerate'], 'true'))
  strategy:
    matrix:
      Linux_Core:
        Pool: azsdk-pool-mms-ubuntu-1804-general
        OSVmImage: MMSUbuntu18.04
        CmakeEnvArg: ''
        CmakeArgs: ''
        CmakeGeneratePath: "sdk/core/azure-core"
        AptDependencies: 'libcurl4-openssl-dev'
  pool:
    name: $(Pool)
    vmImage: $(OSVmImage)
  variables:
    CMOCKA_XML_FILE: "%g-test-results.xml"
    CMOCKA_MESSAGE_OUTPUT: "xml"

  steps:
  - checkout: self
    submodules: recursive

  - template: /eng/common/pipelines/templates/steps/verify-agent-os.yml
    parameters:
      AgentImage: $(OSVmImage)

  - template: /eng/common/pipelines/templates/steps/bypass-local-dns.yml

  - pwsh: sudo apt update && sudo apt install -y $(AptDependencies)
    condition: and(succeeded(), ne(variables['AptDependencies'], ''))
    displayName: Install dependencies from apt

  - pwsh: sudo xcode-select -s /Applications/Xcode_$(XCODE_VERSION).app/Contents/Developer
    condition: >-
      and(
        succeeded(),
        contains(variables['OSVmImage'], 'macOS'),
        ne(variables['XCODE_VERSION'], '')
      )
    displayName: Set Xcode version

  - template: /eng/pipelines/templates/steps/vcpkg.yml
    parameters:
      DependenciesVariableName: VcpkgInstall

  - template: /eng/pipelines/templates/steps/cmake-generate.yml
    parameters:
      CmakeGeneratePath: $(CmakeGeneratePath)
      GenerateArgs: $(CmakeArgs)
      Env: "$(CmakeEnvArg)"
