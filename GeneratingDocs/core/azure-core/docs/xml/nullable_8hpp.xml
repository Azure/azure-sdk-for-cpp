<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.10.0" xml:lang="en-US">
  <compounddef id="nullable_8hpp" kind="file" language="C++">
    <compoundname>nullable.hpp</compoundname>
    <includes refid="azure__assert_8hpp" local="yes">azure/core/azure_assert.hpp</includes>
    <includes local="no">new</includes>
    <includes local="no">type_traits</includes>
    <includes local="no">utility</includes>
    <includedby refid="core_8hpp" local="yes">inc/azure/core.hpp</includedby>
    <includedby refid="etag_8hpp" local="yes">inc/azure/core/etag.hpp</includedby>
    <includedby refid="http_8hpp" local="yes">inc/azure/core/http/http.hpp</includedby>
    <includedby refid="json__optional_8hpp" local="yes">inc/azure/core/internal/json/json_optional.hpp</includedby>
    <includedby refid="tracing__impl_8hpp" local="yes">inc/azure/core/internal/tracing/tracing_impl.hpp</includedby>
    <includedby refid="modified__conditions_8hpp" local="yes">inc/azure/core/modified_conditions.hpp</includedby>
    <includedby refid="paged__response_8hpp" local="yes">inc/azure/core/paged_response.hpp</includedby>
    <includedby refid="response_8hpp" local="yes">inc/azure/core/response.hpp</includedby>
    <incdepgraph>
      <node id="2">
        <label>azure/core/azure_assert.hpp</label>
        <link refid="azure__assert_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>inc/azure/core/nullable.hpp</label>
        <link refid="nullable_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>azure/core/platform.hpp</label>
        <link refid="platform_8hpp"/>
      </node>
      <node id="6">
        <label>cassert</label>
      </node>
      <node id="4">
        <label>cstdlib</label>
      </node>
      <node id="7">
        <label>new</label>
      </node>
      <node id="5">
        <label>string</label>
      </node>
      <node id="8">
        <label>type_traits</label>
      </node>
      <node id="9">
        <label>utility</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="2">
        <label>inc/azure/core.hpp</label>
        <link refid="core_8hpp_source"/>
      </node>
      <node id="13">
        <label>inc/azure/core/credentials/token_credential_options.hpp</label>
        <link refid="token__credential__options_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>inc/azure/core/etag.hpp</label>
        <link refid="etag_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>inc/azure/core/http/curl_transport.hpp</label>
        <link refid="curl__transport_8hpp"/>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>inc/azure/core/http/http.hpp</label>
        <link refid="http_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>inc/azure/core/http/policies/policy.hpp</label>
        <link refid="policy_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>inc/azure/core/http/transport.hpp</label>
        <link refid="transport_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>inc/azure/core/http/win_http_transport.hpp</label>
        <link refid="win__http__transport_8hpp"/>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>inc/azure/core/internal/client_options.hpp</label>
        <link refid="client__options_8hpp"/>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>inc/azure/core/internal/http/pipeline.hpp</label>
        <link refid="pipeline_8hpp"/>
      </node>
      <node id="21">
        <label>inc/azure/core/internal/json/json_optional.hpp</label>
        <link refid="json__optional_8hpp"/>
      </node>
      <node id="15">
        <label>inc/azure/core/internal/tracing/service_tracing.hpp</label>
        <link refid="service__tracing_8hpp_source"/>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="22">
        <label>inc/azure/core/internal/tracing/tracing_impl.hpp</label>
        <link refid="tracing__impl_8hpp"/>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>inc/azure/core/match_conditions.hpp</label>
        <link refid="match__conditions_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="23">
        <label>inc/azure/core/modified_conditions.hpp</label>
        <link refid="modified__conditions_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>inc/azure/core/nullable.hpp</label>
        <link refid="nullable_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>inc/azure/core/operation.hpp</label>
        <link refid="operation_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="24">
        <label>inc/azure/core/paged_response.hpp</label>
        <link refid="paged__response_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>inc/azure/core/response.hpp</label>
        <link refid="response_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>src/http/curl/curl_connection_pool_private.hpp</label>
        <link refid="curl__connection__pool__private_8hpp"/>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>src/http/curl/curl_connection_private.hpp</label>
        <link refid="curl__connection__private_8hpp"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>src/http/curl/curl_session_private.hpp</label>
        <link refid="curl__session__private_8hpp"/>
      </node>
      <node id="16">
        <label>src/http/user_agent.cpp</label>
        <link refid="user__agent_8cpp"/>
      </node>
      <node id="11">
        <label>src/http/winhttp/win_http_request.hpp</label>
        <link refid="win__http__request_8hpp"/>
      </node>
    </invincdepgraph>
    <innerclass refid="class_azure_1_1_nullable" prot="public">Azure::Nullable</innerclass>
    <innernamespace refid="namespace_azure">Azure</innernamespace>
    <briefdescription>
<para>Manages an optional contained value, i.e. a value that may or may not be present. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Copyright<sp/>(c)<sp/>Microsoft<sp/>Corporation.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Licensed<sp/>under<sp/>the<sp/>MIT<sp/>License.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="azure__assert_8hpp" kindref="compound">azure/core/azure_assert.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;new&gt;</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>for<sp/>placement<sp/>new</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;type_traits&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;utility&gt;</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>for<sp/>swap<sp/>and<sp/>move</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespace_azure" kindref="compound">Azure</ref><sp/>{</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">_detail<sp/>{</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">NontrivialEmptyType<sp/>final</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>NontrivialEmptyType()<sp/>noexcept<sp/>{}</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="23"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>_detail</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="30" refid="class_azure_1_1_nullable" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_azure_1_1_nullable" kindref="compound">Nullable</ref><sp/>final<sp/>{</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">union</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/>_detail::NontrivialEmptyType<sp/>m_disengaged;<sp/></highlight><highlight class="comment">//<sp/>due<sp/>to<sp/>constexpr<sp/>rules<sp/>for<sp/>the<sp/>default<sp/>constructor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/>m_value;</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>m_hasValue;</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="44" refid="class_azure_1_1_nullable_1ab1032d685f3d89d91986c3896b88803d" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/><ref refid="class_azure_1_1_nullable_1ab1032d685f3d89d91986c3896b88803d" kindref="member">Nullable</ref>()<sp/>:<sp/>m_disengaged{},<sp/>m_hasValue(false)<sp/>{}</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="51" refid="class_azure_1_1_nullable_1aa3b67f518c6b9451a052188f0482ad18" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/><ref refid="class_azure_1_1_nullable_1aa3b67f518c6b9451a052188f0482ad18" kindref="member">Nullable</ref>(T<sp/>initialValue)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal">(std::is_nothrow_move_constructible&lt;T&gt;::value)</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>m_value(std::move(initialValue)),<sp/>m_hasValue(true)</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="61" refid="class_azure_1_1_nullable_1a2d64ebe47430d86eac341d620c8d1c30" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="class_azure_1_1_nullable_1a2d64ebe47430d86eac341d620c8d1c30" kindref="member">Nullable</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_azure_1_1_nullable" kindref="compound">Nullable</ref>&amp;<sp/>other)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal">(std::is_nothrow_copy_constructible&lt;T&gt;::value)</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>m_disengaged{},<sp/>m_hasValue(other.m_hasValue)</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_hasValue)</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>::new<sp/>(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(&amp;m_value))<sp/>T(other.m_value);</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="75" refid="class_azure_1_1_nullable_1aa0e7ba20ce95e979bc7450f532ad56b4" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="class_azure_1_1_nullable_1aa0e7ba20ce95e979bc7450f532ad56b4" kindref="member">Nullable</ref>(<ref refid="class_azure_1_1_nullable" kindref="compound">Nullable</ref>&amp;&amp;<sp/>other)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal">(std::is_nothrow_move_constructible&lt;T&gt;::value)</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>m_disengaged{},<sp/>m_hasValue(other.m_hasValue)</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_hasValue)</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>::new<sp/>(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(&amp;m_value))<sp/>T(std::move(other.m_value));</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="89" refid="class_azure_1_1_nullable_1ad8625cdd03c048fcd14836c5a0e98874" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="class_azure_1_1_nullable_1ad8625cdd03c048fcd14836c5a0e98874" kindref="member">~Nullable</ref>()</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_hasValue)</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_value.~T();</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="101" refid="class_azure_1_1_nullable_1af73e1a55d0306d9002b02cc70cdfe5d2" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_azure_1_1_nullable_1af73e1a55d0306d9002b02cc70cdfe5d2" kindref="member">Reset</ref>()<sp/>noexcept(std::is_nothrow_destructible&lt;T&gt;::value)<sp/></highlight><highlight class="comment">/*<sp/>enforces<sp/>termination<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_hasValue)</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_hasValue<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_value.~T();</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>assumes<sp/>that<sp/>swap<sp/>can&apos;t<sp/>throw<sp/>if<sp/>T<sp/>is<sp/>nothrow<sp/>move<sp/>constructible<sp/>because</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>is_nothrow_swappable<sp/>is<sp/>added<sp/>in<sp/>C++17</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117" refid="class_azure_1_1_nullable_1ab5af88a2c22ea9bc2eb9c9404a9227cd" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_azure_1_1_nullable_1ab5af88a2c22ea9bc2eb9c9404a9227cd" kindref="member">Swap</ref>(<ref refid="class_azure_1_1_nullable" kindref="compound">Nullable</ref>&amp;<sp/>other)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal">(std::is_nothrow_move_constructible&lt;T&gt;::value)</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_hasValue)</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(other.m_hasValue)</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">std::swap;</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_azure_1_1_nullable_1a528123fd139cf279c4652467d7a448d9" kindref="member">swap</ref>(m_value,<sp/>other.m_value);</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>::new<sp/>(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(&amp;other.m_value))<sp/>T(std::move(m_value));<sp/></highlight><highlight class="comment">//<sp/>throws</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>other.m_hasValue<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_azure_1_1_nullable_1af73e1a55d0306d9002b02cc70cdfe5d2" kindref="member">Reset</ref>();</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(other.m_hasValue)</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>::new<sp/>(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(&amp;m_value))<sp/>T(std::move(other.m_value));<sp/></highlight><highlight class="comment">//<sp/>throws</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_hasValue<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>other.Reset();</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight></codeline>
<codeline lineno="147" refid="class_azure_1_1_nullable_1a528123fd139cf279c4652467d7a448d9" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_azure_1_1_nullable_1a528123fd139cf279c4652467d7a448d9" kindref="member">swap</ref>(<ref refid="class_azure_1_1_nullable" kindref="compound">Nullable</ref>&amp;<sp/>lhs,<sp/><ref refid="class_azure_1_1_nullable" kindref="compound">Nullable</ref>&amp;<sp/>rhs)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal">(</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::is_nothrow_move_constructible&lt;T&gt;::value)</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/>lhs.Swap(rhs);</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight></codeline>
<codeline lineno="154" refid="class_azure_1_1_nullable_1a9184df0f6056498df5fb9622d49b9a01" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="class_azure_1_1_nullable" kindref="compound">Nullable</ref>&amp;<sp/><ref refid="class_azure_1_1_nullable_1a9184df0f6056498df5fb9622d49b9a01" kindref="member">operator=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_azure_1_1_nullable" kindref="compound">Nullable</ref>&amp;<sp/>other)</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>copy<sp/>and<sp/>swap<sp/>may<sp/>be<sp/>inefficient<sp/>for<sp/>some<sp/>Ts<sp/>but</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>it&apos;s<sp/>a<sp/>lot<sp/>less<sp/>code<sp/>than<sp/>the<sp/>standard<sp/>implementation<sp/>:)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_azure_1_1_nullable" kindref="compound">Nullable</ref>{other}.<ref refid="class_azure_1_1_nullable_1ab5af88a2c22ea9bc2eb9c9404a9227cd" kindref="member">Swap</ref>(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight></codeline>
<codeline lineno="163" refid="class_azure_1_1_nullable_1a2094d9d0a555c15b22178168a7589dad" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="class_azure_1_1_nullable" kindref="compound">Nullable</ref>&amp;<sp/><ref refid="class_azure_1_1_nullable_1a2094d9d0a555c15b22178168a7589dad" kindref="member">operator=</ref>(<ref refid="class_azure_1_1_nullable" kindref="compound">Nullable</ref>&amp;&amp;<sp/>other)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal">(std::is_nothrow_move_constructible&lt;T&gt;::value)</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>move<sp/>and<sp/>swap<sp/>may<sp/>be<sp/>inefficient<sp/>for<sp/>some<sp/>Ts<sp/>but</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>it&apos;s<sp/>a<sp/>lot<sp/>less<sp/>code<sp/>than<sp/>the<sp/>standard<sp/>implementation<sp/>:)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_azure_1_1_nullable" kindref="compound">Nullable</ref>{std::move(other)}.<ref refid="class_azure_1_1_nullable_1ab5af88a2c22ea9bc2eb9c9404a9227cd" kindref="member">Swap</ref>(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">U<sp/>=<sp/>T,</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::enable_if&lt;</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!std::is_same&lt;</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_azure_1_1_nullable_1ab1032d685f3d89d91986c3896b88803d" kindref="member">Nullable</ref>,</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::remove_cv&lt;typename<sp/>std::remove_reference&lt;U&gt;::type&gt;::type&gt;::</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value<sp/></highlight><highlight class="comment">//<sp/>Avoid<sp/>repeated<sp/>assignment</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>!(</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::is_scalar&lt;U&gt;::value</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>std::is_same&lt;T,<sp/>typename<sp/>std::decay&lt;U&gt;::type&gt;::value)<sp/></highlight><highlight class="comment">//<sp/>Avoid<sp/>repeated</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>assignment<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>equivalent<sp/>scalar</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>types</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>std::is_constructible&lt;T,<sp/>U&gt;::value<sp/></highlight><highlight class="comment">//<sp/>Ensure<sp/>the<sp/>type<sp/>is<sp/>constructible</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>std::is_assignable&lt;T&amp;,<sp/>U&gt;::value,<sp/></highlight><highlight class="comment">//<sp/>Ensure<sp/>the<sp/>type<sp/>is<sp/>assignable</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&gt;::type</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0&gt;</highlight></codeline>
<codeline lineno="195" refid="class_azure_1_1_nullable_1a7b2657e238de56221f903b135cdaae44" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="class_azure_1_1_nullable" kindref="compound">Nullable</ref>&amp;<sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal">=(U&amp;&amp;<sp/>other)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal">(</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::is_nothrow_constructible&lt;T,<sp/>U&gt;::value&amp;&amp;<sp/>std::is_nothrow_assignable&lt;T&amp;,<sp/>U&gt;::value)</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_hasValue)</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_value<sp/>=<sp/>std::forward&lt;U&gt;(other);</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>::new<sp/>(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(&amp;m_value))<sp/>T(std::forward&lt;U&gt;(other));</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_hasValue<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal">...<sp/>U&gt;</highlight></codeline>
<codeline lineno="217" refid="class_azure_1_1_nullable_1ab8e5d08de8f40fd0edd53868c6c757a8" refkind="member"><highlight class="normal"><sp/><sp/>T&amp;<sp/><ref refid="class_azure_1_1_nullable_1ab8e5d08de8f40fd0edd53868c6c757a8" kindref="member">Emplace</ref>(U&amp;&amp;...<sp/>Args)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal">(std::is_nothrow_constructible&lt;T,<sp/>U...&gt;::value)</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_azure_1_1_nullable_1af73e1a55d0306d9002b02cc70cdfe5d2" kindref="member">Reset</ref>();</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/>::new<sp/>(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(&amp;m_value))<sp/>T(std::forward&lt;U&gt;(Args)...);</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/>m_hasValue<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_value;</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight></codeline>
<codeline lineno="230" refid="class_azure_1_1_nullable_1a9a0c797c4eb208551e045de2d97809f7" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_azure_1_1_nullable_1a9a0c797c4eb208551e045de2d97809f7" kindref="member">HasValue</ref>()<sp/>const<sp/>noexcept<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_hasValue;<sp/>}</highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight></codeline>
<codeline lineno="236" refid="class_azure_1_1_nullable_1a97723b8e1d2c4043c751a159697ba0c6" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/><ref refid="class_azure_1_1_nullable_1a97723b8e1d2c4043c751a159697ba0c6" kindref="member">Value</ref>()<sp/>const&amp;<sp/>noexcept</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="azure__assert_8hpp_1a9e91c95a63cb50551fd21d8b0bc1096d" kindref="member">AZURE_ASSERT_MSG</ref>(m_hasValue,<sp/></highlight><highlight class="stringliteral">&quot;Empty<sp/>Nullable,<sp/>check<sp/>HasValue()<sp/>first.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_value;</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight></codeline>
<codeline lineno="247" refid="class_azure_1_1_nullable_1a99fd0eee11cb24372bfa8b72c964252a" refkind="member"><highlight class="normal"><sp/><sp/>T&amp;<sp/><ref refid="class_azure_1_1_nullable_1a99fd0eee11cb24372bfa8b72c964252a" kindref="member">Value</ref>()<sp/>&amp;<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="azure__assert_8hpp_1a9e91c95a63cb50551fd21d8b0bc1096d" kindref="member">AZURE_ASSERT_MSG</ref>(m_hasValue,<sp/></highlight><highlight class="stringliteral">&quot;Empty<sp/>Nullable,<sp/>check<sp/>HasValue()<sp/>first.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_value;</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight></codeline>
<codeline lineno="258" refid="class_azure_1_1_nullable_1af891adde37c391b34b5529fd11218fd2" refkind="member"><highlight class="normal"><sp/><sp/>T&amp;&amp;<sp/><ref refid="class_azure_1_1_nullable_1af891adde37c391b34b5529fd11218fd2" kindref="member">Value</ref>()<sp/>&amp;&amp;<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="azure__assert_8hpp_1a9e91c95a63cb50551fd21d8b0bc1096d" kindref="member">AZURE_ASSERT_MSG</ref>(m_hasValue,<sp/></highlight><highlight class="stringliteral">&quot;Empty<sp/>Nullable,<sp/>check<sp/>HasValue()<sp/>first.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::move(m_value);</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>observers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight></codeline>
<codeline lineno="271" refid="class_azure_1_1_nullable_1a0081534f590dc332391440478e05d6f5" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/>bool()<sp/>const<sp/>noexcept<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_azure_1_1_nullable_1a9a0c797c4eb208551e045de2d97809f7" kindref="member">HasValue</ref>();<sp/>}</highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight></codeline>
<codeline lineno="281" refid="class_azure_1_1_nullable_1a9503e5d99362c845c193a180cd56243d" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T*<sp/><ref refid="class_azure_1_1_nullable_1a9503e5d99362c845c193a180cd56243d" kindref="member">operator-&gt;</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::addressof(m_value);<sp/>}</highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight></codeline>
<codeline lineno="291" refid="class_azure_1_1_nullable_1a10588327aa097a16979bd8e0922afa4b" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>T*<sp/><ref refid="class_azure_1_1_nullable_1a10588327aa097a16979bd8e0922afa4b" kindref="member">operator-&gt;</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::addressof(m_value);<sp/>}</highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight></codeline>
<codeline lineno="301" refid="class_azure_1_1_nullable_1aeb6beec913524bdb1f068687746f9ad4" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/><ref refid="class_azure_1_1_nullable_1aeb6beec913524bdb1f068687746f9ad4" kindref="member">operator*</ref>()<sp/>const&amp;<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_value;<sp/>}</highlight></codeline>
<codeline lineno="302"><highlight class="normal"></highlight></codeline>
<codeline lineno="311" refid="class_azure_1_1_nullable_1ac4c6c4b3d5ad7ebcd3c36052b992f8ed" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>T&amp;<sp/><ref refid="class_azure_1_1_nullable_1ac4c6c4b3d5ad7ebcd3c36052b992f8ed" kindref="member">operator*</ref>()<sp/>&amp;<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_value;<sp/>}</highlight></codeline>
<codeline lineno="312"><highlight class="normal"></highlight></codeline>
<codeline lineno="321" refid="class_azure_1_1_nullable_1a75a6159e00082a40582322be816562c6" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>T&amp;&amp;<sp/><ref refid="class_azure_1_1_nullable_1a75a6159e00082a40582322be816562c6" kindref="member">operator*</ref>()<sp/>&amp;&amp;<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::move(m_value);<sp/>}</highlight></codeline>
<codeline lineno="322"><highlight class="normal"></highlight></codeline>
<codeline lineno="331" refid="class_azure_1_1_nullable_1abf7a0ba296829896efafa19544be5ef9" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;&amp;<sp/><ref refid="class_azure_1_1_nullable_1abf7a0ba296829896efafa19544be5ef9" kindref="member">operator*</ref>()<sp/>const&amp;&amp;<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::move(m_value);<sp/>}</highlight></codeline>
<codeline lineno="332"><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">U<sp/>=<sp/>T,</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::enable_if&lt;</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::is_convertible&lt;const<sp/>T&amp;,<sp/>typename<sp/>std::remove_cv&lt;T&gt;::type&gt;::value</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>std::is_convertible&lt;U,<sp/>T&gt;::value,</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&gt;::type</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0&gt;</highlight></codeline>
<codeline lineno="345" refid="class_azure_1_1_nullable_1a6cb17c73e74a65db4defbae1ce74a1c1" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::remove_cv&lt;T&gt;::type<sp/><ref refid="class_azure_1_1_nullable_1a6cb17c73e74a65db4defbae1ce74a1c1" kindref="member">ValueOr</ref>(U&amp;&amp;<sp/>other)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_hasValue)</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_value;</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="351"><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">typename<sp/>std::remove_cv&lt;T&gt;::type</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(std::forward&lt;U&gt;(other));</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="354"><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">U<sp/>=<sp/>T,</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::enable_if&lt;</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::is_convertible&lt;T,<sp/>typename<sp/>std::remove_cv&lt;T&gt;::type&gt;::value</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>std::is_convertible&lt;U,<sp/>T&gt;::value,</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&gt;::type</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0&gt;</highlight></codeline>
<codeline lineno="367" refid="class_azure_1_1_nullable_1ae15748b7abfcb2a6a2c4dd72f2f8c3ec" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::remove_cv&lt;T&gt;::type<sp/><ref refid="class_azure_1_1_nullable_1ae15748b7abfcb2a6a2c4dd72f2f8c3ec" kindref="member">ValueOr</ref>(U&amp;&amp;<sp/>other)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_hasValue)</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::move(m_value);</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="373"><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">typename<sp/>std::remove_cv&lt;T&gt;::type</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(std::forward&lt;U&gt;(other));</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="376"><highlight class="normal">};</highlight></codeline>
<codeline lineno="377"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>Azure</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="inc/azure/core/nullable.hpp"/>
  </compounddef>
</doxygen>
