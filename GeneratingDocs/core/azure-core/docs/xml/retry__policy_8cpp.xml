<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.10.0" xml:lang="en-US">
  <compounddef id="retry__policy_8cpp" kind="file" language="C++">
    <compoundname>retry_policy.cpp</compoundname>
    <includes refid="policy_8hpp" local="yes">azure/core/http/policies/policy.hpp</includes>
    <includes refid="log_8hpp" local="yes">azure/core/internal/diagnostics/log.hpp</includes>
    <includes local="no">algorithm</includes>
    <includes local="no">cstdlib</includes>
    <includes local="no">limits</includes>
    <includes local="no">sstream</includes>
    <includes local="no">thread</includes>
    <incdepgraph>
      <node id="11">
        <label>azure/core/azure_assert.hpp</label>
        <link refid="azure__assert_8hpp"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>azure/core/case_insensitive_containers.hpp</label>
        <link refid="case__insensitive__containers_8hpp"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>azure/core/context.hpp</label>
        <link refid="context_8hpp"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
      </node>
      <node id="24">
        <label>azure/core/credentials/credentials.hpp</label>
        <link refid="credentials_8hpp"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>azure/core/datetime.hpp</label>
        <link refid="datetime_8hpp"/>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="51">
        <label>azure/core/diagnostics/logger.hpp</label>
        <link refid="logger_8hpp"/>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="30">
        <label>azure/core/exception.hpp</label>
        <link refid="exception_8hpp"/>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
      </node>
      <node id="29">
        <label>azure/core/http/http.hpp</label>
        <link refid="http_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
      </node>
      <node id="31">
        <label>azure/core/http/http_status_code.hpp</label>
        <link refid="http__status__code_8hpp"/>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>azure/core/http/policies/policy.hpp</label>
        <link refid="policy_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
      </node>
      <node id="32">
        <label>azure/core/http/raw_response.hpp</label>
        <link refid="raw__response_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
      </node>
      <node id="42">
        <label>azure/core/http/transport.hpp</label>
        <link refid="transport_8hpp"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
      </node>
      <node id="37">
        <label>azure/core/internal/contract.hpp</label>
        <link refid="contract_8hpp_source"/>
      </node>
      <node id="50">
        <label>azure/core/internal/diagnostics/log.hpp</label>
        <link refid="log_8hpp_source"/>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
      </node>
      <node id="43">
        <label>azure/core/internal/http/http_sanitizer.hpp</label>
        <link refid="http__sanitizer_8hpp_source"/>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="44">
        <label>azure/core/internal/http/user_agent.hpp</label>
        <link refid="user__agent_8hpp"/>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>azure/core/internal/strings.hpp</label>
        <link refid="strings_8hpp"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="33">
        <label>azure/core/io/body_stream.hpp</label>
        <link refid="body__stream_8hpp"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
      </node>
      <node id="38">
        <label>azure/core/nullable.hpp</label>
        <link refid="nullable_8hpp"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>azure/core/platform.hpp</label>
        <link refid="platform_8hpp"/>
      </node>
      <node id="40">
        <label>azure/core/url.hpp</label>
        <link refid="url_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="45">
        <label>azure/core/uuid.hpp</label>
        <link refid="uuid_8hpp"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>src/http/retry_policy.cpp</label>
        <link refid="retry__policy_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>algorithm</label>
      </node>
      <node id="46">
        <label>array</label>
      </node>
      <node id="20">
        <label>atomic</label>
      </node>
      <node id="16">
        <label>azure/core/dll_import_export.hpp</label>
      </node>
      <node id="19">
        <label>azure/core/rtti.hpp</label>
      </node>
      <node id="14">
        <label>cassert</label>
      </node>
      <node id="17">
        <label>chrono</label>
      </node>
      <node id="48">
        <label>cstddef</label>
      </node>
      <node id="34">
        <label>cstdint</label>
      </node>
      <node id="35">
        <label>cstdio</label>
      </node>
      <node id="13">
        <label>cstdlib</label>
      </node>
      <node id="6">
        <label>cstring</label>
      </node>
      <node id="25">
        <label>exception</label>
      </node>
      <node id="36">
        <label>functional</label>
      </node>
      <node id="52">
        <label>iostream</label>
      </node>
      <node id="54">
        <label>limits</label>
      </node>
      <node id="8">
        <label>map</label>
      </node>
      <node id="21">
        <label>memory</label>
      </node>
      <node id="26">
        <label>mutex</label>
      </node>
      <node id="39">
        <label>new</label>
      </node>
      <node id="18">
        <label>ostream</label>
      </node>
      <node id="9">
        <label>set</label>
      </node>
      <node id="49">
        <label>shared_mutex</label>
      </node>
      <node id="53">
        <label>sstream</label>
      </node>
      <node id="22">
        <label>stdexcept</label>
      </node>
      <node id="47">
        <label>stdint.h</label>
      </node>
      <node id="7">
        <label>string</label>
      </node>
      <node id="55">
        <label>thread</label>
      </node>
      <node id="23">
        <label>type_traits</label>
      </node>
      <node id="41">
        <label>unordered_set</label>
      </node>
      <node id="27">
        <label>utility</label>
      </node>
      <node id="28">
        <label>vector</label>
      </node>
    </incdepgraph>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Copyright<sp/>(c)<sp/>Microsoft<sp/>Corporation.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Licensed<sp/>under<sp/>the<sp/>MIT<sp/>License.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="policy_8hpp" kindref="compound">azure/core/http/policies/policy.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;azure/core/internal/diagnostics/log.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;algorithm&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstdlib&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;limits&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sstream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;thread&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="class_azure_1_1_core_1_1_context" kindref="compound">Azure::Core::Context</ref>;</highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">Azure::Core::Http;</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">Azure::Core::Http::Policies;</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">Azure::Core::Http::Policies::_internal;</highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>GetResponseHeaderBasedDelay(<ref refid="class_azure_1_1_core_1_1_http_1_1_raw_response" kindref="compound">RawResponse</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>response,<sp/>std::chrono::milliseconds&amp;<sp/>retryAfter)</highlight></codeline>
<codeline lineno="20"><highlight class="normal">{</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Try<sp/>to<sp/>find<sp/>retry-after<sp/>headers.<sp/>There<sp/>are<sp/>several<sp/>of<sp/>them<sp/>possible.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>responseHeaders<sp/>=<sp/>response.<ref refid="class_azure_1_1_core_1_1_http_1_1_raw_response_1aaceb17666be80a87f0789713ce70a8f3" kindref="member">GetHeaders</ref>();</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>responseHeadersEnd<sp/>=<sp/>responseHeaders.end();</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>header<sp/>=<sp/>responseHeadersEnd;</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(((header<sp/>=<sp/>responseHeaders.find(</highlight><highlight class="stringliteral">&quot;retry-after-ms&quot;</highlight><highlight class="normal">))<sp/>!=<sp/>responseHeadersEnd)</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>((header<sp/>=<sp/>responseHeaders.find(</highlight><highlight class="stringliteral">&quot;x-ms-retry-after-ms&quot;</highlight><highlight class="normal">))<sp/>!=<sp/>responseHeadersEnd))</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>headers<sp/>above<sp/>are<sp/>in<sp/>milliseconds.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/>retryAfter<sp/>=<sp/>std::chrono::milliseconds(std::stoi(header-&gt;second));</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((header<sp/>=<sp/>responseHeaders.find(</highlight><highlight class="stringliteral">&quot;retry-after&quot;</highlight><highlight class="normal">))<sp/>!=<sp/>responseHeadersEnd)</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>header<sp/>is<sp/>in<sp/>seconds.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/>retryAfter<sp/>=<sp/>std::chrono::seconds(std::stoi(header-&gt;second));</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Tracked<sp/>by<sp/>https://github.com/Azure/azure-sdk-for-cpp/issues/262</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>----------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>To<sp/>be<sp/>accurate,<sp/>the<sp/>Retry-After<sp/>header<sp/>is<sp/>EITHER<sp/>seconds,<sp/>or<sp/>a<sp/>DateTime.<sp/>So<sp/>we<sp/>need<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>write<sp/>a<sp/>parser<sp/>for<sp/>that<sp/>(and<sp/>handle<sp/>the<sp/>case<sp/>when<sp/>parsing<sp/>seconds<sp/>fails).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>More<sp/>info:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>*<sp/>Retry-After<sp/>header:<sp/>https://developer.mozilla.org/docs/Web/HTTP/Headers/Retry-After</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>*<sp/>HTTP<sp/>Date<sp/>format:<sp/>https://developer.mozilla.org/docs/Web/HTTP/Headers/Date</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>*<sp/>Parsing<sp/>the<sp/>date:<sp/>https://en.cppreference.com/w/cpp/locale/time_get</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>*<sp/>Get<sp/>system<sp/>datetime:<sp/>https://en.cppreference.com/w/cpp/chrono/system_clock/now</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>*<sp/>Subtract<sp/>datetimes<sp/>to<sp/>get<sp/>duration:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>https://en.cppreference.com/w/cpp/chrono/time_point/operator_arith2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="54"><highlight class="normal">}</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal">std::chrono::milliseconds<sp/>CalculateExponentialDelay(</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_azure_1_1_core_1_1_http_1_1_policies_1_1_retry_options" kindref="compound">RetryOptions</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>retryOptions,</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/>int32_t<sp/>attempt,</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>jitterFactor)</highlight></codeline>
<codeline lineno="72"><highlight class="normal">{</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(jitterFactor<sp/>&lt;<sp/>0.8<sp/>||<sp/>jitterFactor<sp/>&gt;<sp/>1.3)</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>jitterFactor<sp/>is<sp/>a<sp/>random<sp/>double<sp/>number<sp/>in<sp/>the<sp/>range<sp/>[0.8<sp/>..<sp/>1.3]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/>jitterFactor</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0.8<sp/>+<sp/>((</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">int32_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(std::rand()))<sp/>/<sp/>RAND_MAX)<sp/>*<sp/>0.5);</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>beforeLastBit</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>std::numeric_limits&lt;int32_t&gt;::digits<sp/>-<sp/>(std::numeric_limits&lt;int32_t&gt;::is_signed<sp/>?<sp/>1<sp/>:<sp/>0);</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Scale<sp/>exponentially:<sp/>1<sp/>x<sp/>RetryDelay<sp/>on<sp/>1st<sp/>attempt,<sp/>2x<sp/>on<sp/>2nd,<sp/>4x<sp/>on<sp/>3rd,<sp/>8x<sp/>on<sp/>4th<sp/>...<sp/>all<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>way<sp/>up<sp/>to<sp/>(std::numeric_limits&lt;int32_t&gt;::max())<sp/>*<sp/>RetryDelay.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>exponentialRetryAfter<sp/>=<sp/>retryOptions.<ref refid="struct_azure_1_1_core_1_1_http_1_1_policies_1_1_retry_options_1a06ba92fd6194748cabd32bc78390e348" kindref="member">RetryDelay</ref></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>(((attempt<sp/>-<sp/>1)<sp/>&lt;=<sp/>beforeLastBit)<sp/>?<sp/>(1<sp/>&lt;&lt;<sp/>(attempt<sp/>-<sp/>1))</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>(std::numeric_limits&lt;int32_t&gt;::max()));</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Multiply<sp/>exponentialRetryAfter<sp/>by<sp/>jitterFactor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/>exponentialRetryAfter<sp/>=<sp/>std::chrono::milliseconds(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">std::chrono::milliseconds::rep</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(std::chrono::duration&lt;double,<sp/>std::chrono::milliseconds::period&gt;(exponentialRetryAfter)</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>jitterFactor)</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.count()));</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(std::min)(exponentialRetryAfter,<sp/>retryOptions.<ref refid="struct_azure_1_1_core_1_1_http_1_1_policies_1_1_retry_options_1a5f90051b3513321e14d257298723b615" kindref="member">MaxRetryDelay</ref>);</highlight></codeline>
<codeline lineno="96"><highlight class="normal">}</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>WasLastAttempt(<ref refid="struct_azure_1_1_core_1_1_http_1_1_policies_1_1_retry_options" kindref="compound">RetryOptions</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>retryOptions,<sp/>int32_t<sp/>attempt)</highlight></codeline>
<codeline lineno="99"><highlight class="normal">{</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>attempt<sp/>&gt;<sp/>retryOptions.<ref refid="struct_azure_1_1_core_1_1_http_1_1_policies_1_1_retry_options_1a1ae346a844eeeee69972acbdc5bd92e3" kindref="member">MaxRetries</ref>;</highlight></codeline>
<codeline lineno="101"><highlight class="normal">}</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><ref refid="class_azure_1_1_core_1_1_context_1_1_key" kindref="compound">Context::Key</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>RetryKey;</highlight></codeline>
<codeline lineno="104"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal">int32_t<sp/>RetryPolicy::GetRetryCount(<ref refid="class_azure_1_1_core_1_1_context" kindref="compound">Context</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>context)</highlight></codeline>
<codeline lineno="107"><highlight class="normal">{</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/>int32_t<sp/>number<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Context<sp/>with<sp/>no<sp/>data<sp/>abut<sp/>sending<sp/>request<sp/>with<sp/>retry<sp/>policy<sp/>=<sp/>-1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>First<sp/>try<sp/>=<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Second<sp/>try<sp/>=<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>third<sp/>try<sp/>=<sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/>int32_t*<sp/>ptr<sp/>=<sp/>&amp;number;</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/>context.<ref refid="class_azure_1_1_core_1_1_context_1a44896de14f31ec4e45ba5f0beaa99326" kindref="member">TryGetValue</ref>&lt;int32_t*&gt;(RetryKey,<sp/>ptr);</highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*ptr;</highlight></codeline>
<codeline lineno="119"><highlight class="normal">}</highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal">std::unique_ptr&lt;RawResponse&gt;<sp/>RetryPolicy::Send(</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_azure_1_1_core_1_1_http_1_1_request" kindref="compound">Request</ref>&amp;<sp/>request,</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_azure_1_1_core_1_1_http_1_1_policies_1_1_next_http_policy" kindref="compound">NextHttpPolicy</ref><sp/>nextPolicy,</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_azure_1_1_core_1_1_context" kindref="compound">Context</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>context)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="125"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="class_azure_1_1_core_1_1_diagnostics_1_1_logger" kindref="compound">Azure::Core::Diagnostics::Logger</ref>;</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">Azure::Core::Diagnostics::_internal::Log;</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>retryCount<sp/>needs<sp/>to<sp/>be<sp/>apart<sp/>from<sp/>RetryNumber<sp/>attempt.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/>int32_t<sp/>retryCount<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>retryContext<sp/>=<sp/>context.<ref refid="class_azure_1_1_core_1_1_context_1a9d1a4f785ea71043920be592f789e87b" kindref="member">WithValue</ref>(RetryKey,<sp/>&amp;retryCount);</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(int32_t<sp/>attempt<sp/>=<sp/>1;;<sp/>++attempt)</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/>std::chrono::milliseconds<sp/>retryAfter{};</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/>request.StartTry();</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>creates<sp/>a<sp/>copy<sp/>of<sp/>original<sp/>query<sp/>parameters<sp/>from<sp/>request</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>originalQueryParameters<sp/>=<sp/>request.<ref refid="class_azure_1_1_core_1_1_http_1_1_request_1a6cda1c14edbd6c5283be6014fe37a4dd" kindref="member">GetUrl</ref>().<ref refid="class_azure_1_1_core_1_1_url_1ab8dd37022c4c6036d59a4992a3607ffc" kindref="member">GetQueryParameters</ref>();</highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>response<sp/>=<sp/>nextPolicy.<ref refid="class_azure_1_1_core_1_1_http_1_1_policies_1_1_next_http_policy_1a9c1768b963eade38336239f48d471097" kindref="member">Send</ref>(request,<sp/>retryContext);</highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>we<sp/>are<sp/>out<sp/>of<sp/>retry<sp/>attempts,<sp/>if<sp/>a<sp/>response<sp/>is<sp/>non-retriable<sp/>(or<sp/>simply<sp/>200<sp/>OK,<sp/>i.e</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>doesn&apos;t<sp/>need<sp/>to<sp/>be<sp/>retried),<sp/>then<sp/>ShouldRetry<sp/>returns<sp/>false.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ShouldRetryOnResponse(*response.get(),<sp/>m_retryOptions,<sp/>attempt,<sp/>retryAfter))</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>this<sp/>is<sp/>the<sp/>second<sp/>attempt<sp/>and<sp/>StartTry<sp/>was<sp/>called,<sp/>we<sp/>need<sp/>to<sp/>stop<sp/>it.<sp/>Otherwise</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>trying<sp/>to<sp/>perform<sp/>same<sp/>request<sp/>would<sp/>use<sp/>last<sp/>retry<sp/>query/headers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>response;</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_azure_1_1_core_1_1_http_1_1_transport_exception" kindref="compound">TransportException</ref>&amp;<sp/>e)</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Log::ShouldWrite(Logger::Level::Warning))</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Log::Write(Logger::Level::Warning,<sp/>std::string(</highlight><highlight class="stringliteral">&quot;HTTP<sp/>Transport<sp/>error:<sp/>&quot;</highlight><highlight class="normal">)<sp/>+<sp/>e.what());</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ShouldRetryOnTransportFailure(m_retryOptions,<sp/>attempt,<sp/>retryAfter))</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Log::ShouldWrite(Logger::Level::Informational))</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::ostringstream<sp/>log;</highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>log<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;HTTP<sp/>Retry<sp/>attempt<sp/>#&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>attempt<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>will<sp/>be<sp/>made<sp/>in<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>std::chrono::duration_cast&lt;std::chrono::milliseconds&gt;(retryAfter).count()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;ms.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Log::Write(Logger::Level::Informational,<sp/>log.str());</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Sleep(0)<sp/>behavior<sp/>is<sp/>implementation-defined:<sp/>it<sp/>may<sp/>yield,<sp/>or<sp/>may<sp/>do<sp/>nothing.<sp/>Let&apos;s<sp/>make<sp/>sure</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>we<sp/>proceed<sp/>immediately<sp/>if<sp/>it<sp/>is<sp/>0.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(retryAfter.count()<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Before<sp/>sleeping,<sp/>check<sp/>to<sp/>make<sp/>sure<sp/>that<sp/>the<sp/>context<sp/>hasn&apos;t<sp/>already<sp/>been<sp/>cancelled.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>context.<ref refid="class_azure_1_1_core_1_1_context_1a08e3e60c70888f118ea0038a8b5e8df2" kindref="member">ThrowIfCancelled</ref>();</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::this_thread::sleep_for(retryAfter);</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Restore<sp/>the<sp/>original<sp/>query<sp/>parameters<sp/>before<sp/>next<sp/>retry</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/>request.<ref refid="class_azure_1_1_core_1_1_http_1_1_request_1a6cda1c14edbd6c5283be6014fe37a4dd" kindref="member">GetUrl</ref>().<ref refid="class_azure_1_1_core_1_1_url_1aafafcb3c20b2663251ed254e6e65ab0c" kindref="member">SetQueryParameters</ref>(std::move(originalQueryParameters));</highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Update<sp/>retry<sp/>number</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/>retryCount<sp/>+=<sp/>1;</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="190"><highlight class="normal">}</highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>RetryPolicy::ShouldRetryOnTransportFailure(</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_azure_1_1_core_1_1_http_1_1_policies_1_1_retry_options" kindref="compound">RetryOptions</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>retryOptions,</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/>int32_t<sp/>attempt,</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/>std::chrono::milliseconds&amp;<sp/>retryAfter,</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>jitterFactor)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="197"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Are<sp/>we<sp/>out<sp/>of<sp/>retry<sp/>attempts?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(WasLastAttempt(retryOptions,<sp/>attempt))</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/>retryAfter<sp/>=<sp/>CalculateExponentialDelay(retryOptions,<sp/>attempt,<sp/>jitterFactor);</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="206"><highlight class="normal">}</highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>RetryPolicy::ShouldRetryOnResponse(</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_azure_1_1_core_1_1_http_1_1_raw_response" kindref="compound">RawResponse</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>response,</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_azure_1_1_core_1_1_http_1_1_policies_1_1_retry_options" kindref="compound">RetryOptions</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>retryOptions,</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/>int32_t<sp/>attempt,</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/>std::chrono::milliseconds&amp;<sp/>retryAfter,</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>jitterFactor)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="214"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="class_azure_1_1_core_1_1_diagnostics_1_1_logger" kindref="compound">Azure::Core::Diagnostics::Logger</ref>;</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">Azure::Core::Diagnostics::_internal::Log;</highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Are<sp/>we<sp/>out<sp/>of<sp/>retry<sp/>attempts?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(WasLastAttempt(retryOptions,<sp/>attempt))</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Should<sp/>we<sp/>retry<sp/>on<sp/>the<sp/>given<sp/>response<sp/>retry<sp/>code?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>statusCodes<sp/>=<sp/>retryOptions.<ref refid="struct_azure_1_1_core_1_1_http_1_1_policies_1_1_retry_options_1a88c82f2eeb65eb9b7819e1c55dcf86ae" kindref="member">StatusCodes</ref>;</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>sc<sp/>=<sp/>response.<ref refid="class_azure_1_1_core_1_1_http_1_1_raw_response_1a174ddd85ba65cfdbd7825122d95865ed" kindref="member">GetStatusCode</ref>();</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(statusCodes.find(sc)<sp/>==<sp/>statusCodes.end())</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Log::ShouldWrite(Logger::Level::Informational))</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Log::Write(</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Logger::Level::Informational,</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string(</highlight><highlight class="stringliteral">&quot;HTTP<sp/>status<sp/>code<sp/>&quot;</highlight><highlight class="normal">)<sp/>+<sp/>std::to_string(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(sc))</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>won&apos;t<sp/>be<sp/>retried.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Log::ShouldWrite(Logger::Level::Informational))</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Log::Write(</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Logger::Level::Informational,</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string(</highlight><highlight class="stringliteral">&quot;HTTP<sp/>status<sp/>code<sp/>&quot;</highlight><highlight class="normal">)<sp/>+<sp/>std::to_string(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(sc))</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>will<sp/>be<sp/>retried.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!GetResponseHeaderBasedDelay(response,<sp/>retryAfter))</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/>retryAfter<sp/>=<sp/>CalculateExponentialDelay(retryOptions,<sp/>attempt,<sp/>jitterFactor);</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="255"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="src/http/retry_policy.cpp"/>
  </compounddef>
</doxygen>
