<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.10.0" xml:lang="en-US">
  <compounddef id="class_azure_1_1_nullable" kind="class" language="C++" prot="public" final="yes">
    <compoundname>Azure::Nullable</compoundname>
    <includes refid="nullable_8hpp" local="no">nullable.hpp</includes>
    <templateparamlist>
      <param>
        <type>class T</type>
      </param>
    </templateparamlist>
    <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="class_azure_1_1_nullable_1a79bcb1c4eb4fd85df010fae635fc6260" prot="public" static="no" mutable="no">
        <type>_detail::NontrivialEmptyType</type>
        <definition>_detail::NontrivialEmptyType Azure::Nullable&lt; T &gt;::m_disengaged</definition>
        <argsstring></argsstring>
        <name>m_disengaged</name>
        <qualifiedname>Azure::Nullable::m_disengaged</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/azure/core/nullable.hpp" line="33" column="34" bodyfile="inc/azure/core/nullable.hpp" bodystart="33" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_azure_1_1_nullable_1a73ffd96428fc63312b5f94d198dcbc63" prot="public" static="no" mutable="no">
        <type>T</type>
        <definition>T Azure::Nullable&lt; T &gt;::m_value</definition>
        <argsstring></argsstring>
        <name>m_value</name>
        <qualifiedname>Azure::Nullable::m_value</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/azure/core/nullable.hpp" line="34" column="7" bodyfile="inc/azure/core/nullable.hpp" bodystart="34" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_azure_1_1_nullable_1a45ac1f04cb981a2771ff4e85cfac08d9" prot="private" static="no" mutable="no">
        <type>union <ref refid="class_azure_1_1_nullable" kindref="compound">Azure::Nullable</ref></type>
        <definition>union Azure::Nullable Azure::Nullable&lt; T &gt;</definition>
        <argsstring></argsstring>
        <name></name>
        <qualifiedname>Azure::Nullable</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/azure/core/nullable.hpp" line="35" column="3"/>
      </memberdef>
      <memberdef kind="variable" id="class_azure_1_1_nullable_1a56f8d958f38817da42712c46e22efc90" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool Azure::Nullable&lt; T &gt;::m_hasValue</definition>
        <argsstring></argsstring>
        <name>m_hasValue</name>
        <qualifiedname>Azure::Nullable::m_hasValue</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/azure/core/nullable.hpp" line="37" column="8" bodyfile="inc/azure/core/nullable.hpp" bodystart="37" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="class_azure_1_1_nullable_1ab1032d685f3d89d91986c3896b88803d" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr</type>
        <definition>constexpr Azure::Nullable&lt; T &gt;::Nullable</definition>
        <argsstring>()</argsstring>
        <name>Nullable</name>
        <qualifiedname>Azure::Nullable::Nullable</qualifiedname>
        <briefdescription>
<para>Constructs a <computeroutput>Nullable</computeroutput> that represents the absence of value. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/azure/core/nullable.hpp" line="44" column="13" bodyfile="inc/azure/core/nullable.hpp" bodystart="44" bodyend="44"/>
      </memberdef>
      <memberdef kind="function" id="class_azure_1_1_nullable_1aa3b67f518c6b9451a052188f0482ad18" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr</type>
        <definition>constexpr Azure::Nullable&lt; T &gt;::Nullable</definition>
        <argsstring>(T initialValue) noexcept(std::is_nothrow_move_constructible&lt; T &gt;::value)</argsstring>
        <name>Nullable</name>
        <qualifiedname>Azure::Nullable::Nullable</qualifiedname>
        <param>
          <type>T</type>
          <declname>initialValue</declname>
        </param>
        <briefdescription>
<para>Constructs a <computeroutput>Nullable</computeroutput> having an <computeroutput>initialValue</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>initialValue</parametername>
</parameternamelist>
<parameterdescription>
<para>A non-absent value to initialize with. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/azure/core/nullable.hpp" line="51" column="13" bodyfile="inc/azure/core/nullable.hpp" bodystart="51" bodyend="54"/>
      </memberdef>
      <memberdef kind="function" id="class_azure_1_1_nullable_1a2d64ebe47430d86eac341d620c8d1c30" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>Azure::Nullable&lt; T &gt;::Nullable</definition>
        <argsstring>(const Nullable &amp;other) noexcept(std::is_nothrow_copy_constructible&lt; T &gt;::value)</argsstring>
        <name>Nullable</name>
        <qualifiedname>Azure::Nullable::Nullable</qualifiedname>
        <param>
          <type>const <ref refid="class_azure_1_1_nullable" kindref="compound">Nullable</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Constructs a <computeroutput>Nullable</computeroutput> by copying another <computeroutput>Nullable</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>Another <computeroutput>Nullable</computeroutput> instance to copy. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/azure/core/nullable.hpp" line="61" column="3" bodyfile="inc/azure/core/nullable.hpp" bodystart="61" bodyend="68"/>
      </memberdef>
      <memberdef kind="function" id="class_azure_1_1_nullable_1aa0e7ba20ce95e979bc7450f532ad56b4" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>Azure::Nullable&lt; T &gt;::Nullable</definition>
        <argsstring>(Nullable &amp;&amp;other) noexcept(std::is_nothrow_move_constructible&lt; T &gt;::value)</argsstring>
        <name>Nullable</name>
        <qualifiedname>Azure::Nullable::Nullable</qualifiedname>
        <param>
          <type><ref refid="class_azure_1_1_nullable" kindref="compound">Nullable</ref> &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Constructs a <computeroutput>Nullable</computeroutput> by moving in another <computeroutput>Nullable</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>A <computeroutput>Nullable</computeroutput> instance to move into the instance being constructed. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/azure/core/nullable.hpp" line="75" column="3" bodyfile="inc/azure/core/nullable.hpp" bodystart="75" bodyend="82"/>
      </memberdef>
      <memberdef kind="function" id="class_azure_1_1_nullable_1ad8625cdd03c048fcd14836c5a0e98874" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>Azure::Nullable&lt; T &gt;::~Nullable</definition>
        <argsstring>()</argsstring>
        <name>~Nullable</name>
        <qualifiedname>Azure::Nullable::~Nullable</qualifiedname>
        <briefdescription>
<para>Destructs the <computeroutput>Nullable</computeroutput>, calling the destructor for the contained value if there is one. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/azure/core/nullable.hpp" line="89" column="3" bodyfile="inc/azure/core/nullable.hpp" bodystart="89" bodyend="95"/>
      </memberdef>
      <memberdef kind="function" id="class_azure_1_1_nullable_1af73e1a55d0306d9002b02cc70cdfe5d2" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Azure::Nullable&lt; T &gt;::Reset</definition>
        <argsstring>() noexcept(std::is_nothrow_destructible&lt; T &gt;::value)</argsstring>
        <name>Reset</name>
        <qualifiedname>Azure::Nullable::Reset</qualifiedname>
        <briefdescription>
<para>Destructs the contained value, if there is one. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/azure/core/nullable.hpp" line="101" column="8" bodyfile="inc/azure/core/nullable.hpp" bodystart="101" bodyend="108"/>
      </memberdef>
      <memberdef kind="function" id="class_azure_1_1_nullable_1ab5af88a2c22ea9bc2eb9c9404a9227cd" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Azure::Nullable&lt; T &gt;::Swap</definition>
        <argsstring>(Nullable &amp;other) noexcept(std::is_nothrow_move_constructible&lt; T &gt;::value)</argsstring>
        <name>Swap</name>
        <qualifiedname>Azure::Nullable::Swap</qualifiedname>
        <param>
          <type><ref refid="class_azure_1_1_nullable" kindref="compound">Nullable</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Exchanges the contents. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>An instance to exchange the contents with. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/azure/core/nullable.hpp" line="117" column="8" bodyfile="inc/azure/core/nullable.hpp" bodystart="117" bodyend="139"/>
      </memberdef>
      <memberdef kind="function" id="class_azure_1_1_nullable_1a9184df0f6056498df5fb9622d49b9a01" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_azure_1_1_nullable" kindref="compound">Nullable</ref> &amp;</type>
        <definition>Nullable &amp; Azure::Nullable&lt; T &gt;::operator=</definition>
        <argsstring>(const Nullable &amp;other)</argsstring>
        <name>operator=</name>
        <qualifiedname>Azure::Nullable::operator=</qualifiedname>
        <param>
          <type>const <ref refid="class_azure_1_1_nullable" kindref="compound">Nullable</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Assignment operator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/azure/core/nullable.hpp" line="154" column="12" bodyfile="inc/azure/core/nullable.hpp" bodystart="154" bodyend="160"/>
      </memberdef>
      <memberdef kind="function" id="class_azure_1_1_nullable_1a2094d9d0a555c15b22178168a7589dad" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="class_azure_1_1_nullable" kindref="compound">Nullable</ref> &amp;</type>
        <definition>Nullable &amp; Azure::Nullable&lt; T &gt;::operator=</definition>
        <argsstring>(Nullable &amp;&amp;other) noexcept(std::is_nothrow_move_constructible&lt; T &gt;::value)</argsstring>
        <name>operator=</name>
        <qualifiedname>Azure::Nullable::operator=</qualifiedname>
        <param>
          <type><ref refid="class_azure_1_1_nullable" kindref="compound">Nullable</ref> &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Assignment operator with move semantics. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/azure/core/nullable.hpp" line="163" column="12" bodyfile="inc/azure/core/nullable.hpp" bodystart="163" bodyend="169"/>
      </memberdef>
      <memberdef kind="function" id="class_azure_1_1_nullable_1a7b2657e238de56221f903b135cdaae44" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class U</type>
            <defval>T</defval>
          </param>
          <param>
            <type>typename std::enable_if&lt; !std::is_same&lt; <ref refid="class_azure_1_1_nullable" kindref="compound">Nullable</ref>, typename std::remove_cv&lt; typename std::remove_reference&lt; U &gt;::type &gt;::type &gt;::value &amp;&amp;!(std::is_scalar&lt; U &gt;::value &amp;&amp;std::is_same&lt; T, typename std::decay&lt; U &gt;::type &gt;::value) &amp;&amp;std::is_constructible&lt; T, U &gt;::value &amp;&amp;std::is_assignable&lt; T &amp;, U &gt;::value, int &gt;::type</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type><ref refid="class_azure_1_1_nullable" kindref="compound">Nullable</ref> &amp;</type>
        <definition>Nullable &amp; Azure::Nullable&lt; T &gt;::operator=</definition>
        <argsstring>(U &amp;&amp;other) noexcept(std::is_nothrow_constructible&lt; T, U &gt;::value &amp;&amp;std::is_nothrow_assignable&lt; T &amp;, U &gt;::value)</argsstring>
        <name>operator=</name>
        <qualifiedname>Azure::Nullable::operator=</qualifiedname>
        <param>
          <type>U &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Assignment operator from another type. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>U</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of <computeroutput>other</computeroutput>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>Other <ref refid="class_azure_1_1_nullable" kindref="compound">Azure::Nullable</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/azure/core/nullable.hpp" line="195" column="12" bodyfile="inc/azure/core/nullable.hpp" bodystart="195" bodyend="208"/>
      </memberdef>
      <memberdef kind="function" id="class_azure_1_1_nullable_1ab8e5d08de8f40fd0edd53868c6c757a8" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class...</type>
            <declname>U</declname>
            <defname>U</defname>
          </param>
        </templateparamlist>
        <type>T &amp;</type>
        <definition>T &amp; Azure::Nullable&lt; T &gt;::Emplace</definition>
        <argsstring>(U &amp;&amp;... Args) noexcept(std::is_nothrow_constructible&lt; T, U... &gt;::value)</argsstring>
        <name>Emplace</name>
        <qualifiedname>Azure::Nullable::Emplace</qualifiedname>
        <param>
          <type>U &amp;&amp;...</type>
          <declname>Args</declname>
        </param>
        <briefdescription>
<para>Construct the contained value in-place. </para>
        </briefdescription>
        <detaileddescription>
<para>If this instance already contains a value before the call, the contained value is destroyed by calling its destructor. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/azure/core/nullable.hpp" line="217" column="5" bodyfile="inc/azure/core/nullable.hpp" bodystart="217" bodyend="223"/>
      </memberdef>
      <memberdef kind="function" id="class_azure_1_1_nullable_1a9a0c797c4eb208551e045de2d97809f7" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool Azure::Nullable&lt; T &gt;::HasValue</definition>
        <argsstring>() const noexcept</argsstring>
        <name>HasValue</name>
        <qualifiedname>Azure::Nullable::HasValue</qualifiedname>
        <briefdescription>
<para>Check whether a value is contained. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><computeroutput>true</computeroutput> If a value is contained, <computeroutput>false</computeroutput> if value is absent. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/azure/core/nullable.hpp" line="230" column="8" bodyfile="inc/azure/core/nullable.hpp" bodystart="230" bodyend="230"/>
      </memberdef>
      <memberdef kind="function" id="class_azure_1_1_nullable_1a97723b8e1d2c4043c751a159697ba0c6" prot="public" static="no" const="yes" explicit="no" inline="yes" refqual="lvalue" noexcept="yes" virt="non-virtual">
        <type>const T &amp;</type>
        <definition>const T &amp; Azure::Nullable&lt; T &gt;::Value</definition>
        <argsstring>() const &amp;noexcept</argsstring>
        <name>Value</name>
        <qualifiedname>Azure::Nullable::Value</qualifiedname>
        <briefdescription>
<para>Get the contained value. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/azure/core/nullable.hpp" line="236" column="11" bodyfile="inc/azure/core/nullable.hpp" bodystart="236" bodyend="241"/>
      </memberdef>
      <memberdef kind="function" id="class_azure_1_1_nullable_1a99fd0eee11cb24372bfa8b72c964252a" prot="public" static="no" const="no" explicit="no" inline="yes" refqual="lvalue" noexcept="yes" virt="non-virtual">
        <type>T &amp;</type>
        <definition>T &amp; Azure::Nullable&lt; T &gt;::Value</definition>
        <argsstring>() &amp;noexcept</argsstring>
        <name>Value</name>
        <qualifiedname>Azure::Nullable::Value</qualifiedname>
        <briefdescription>
<para>Get the contained value reference. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/azure/core/nullable.hpp" line="247" column="5" bodyfile="inc/azure/core/nullable.hpp" bodystart="247" bodyend="252"/>
      </memberdef>
      <memberdef kind="function" id="class_azure_1_1_nullable_1af891adde37c391b34b5529fd11218fd2" prot="public" static="no" const="no" explicit="no" inline="yes" refqual="rvalue" noexcept="yes" virt="non-virtual">
        <type>T &amp;&amp;</type>
        <definition>T &amp;&amp; Azure::Nullable&lt; T &gt;::Value</definition>
        <argsstring>() &amp;&amp;noexcept</argsstring>
        <name>Value</name>
        <qualifiedname>Azure::Nullable::Value</qualifiedname>
        <briefdescription>
<para>Get the contained value (as rvalue reference). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/azure/core/nullable.hpp" line="258" column="5" bodyfile="inc/azure/core/nullable.hpp" bodystart="258" bodyend="263"/>
      </memberdef>
      <memberdef kind="function" id="class_azure_1_1_nullable_1a0081534f590dc332391440478e05d6f5" prot="public" static="no" constexpr="yes" const="yes" explicit="yes" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr</type>
        <definition>constexpr Azure::Nullable&lt; T &gt;::operator bool</definition>
        <argsstring>() const noexcept</argsstring>
        <name>operator bool</name>
        <qualifiedname>Azure::Nullable::operator bool</qualifiedname>
        <briefdescription>
<para><computeroutput>operator bool</computeroutput> on the condition of <ref refid="class_azure_1_1_nullable_1a9a0c797c4eb208551e045de2d97809f7" kindref="member">Azure::Nullable::HasValue</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/azure/core/nullable.hpp" line="271" column="22" bodyfile="inc/azure/core/nullable.hpp" bodystart="271" bodyend="271"/>
      </memberdef>
      <memberdef kind="function" id="class_azure_1_1_nullable_1a9503e5d99362c845c193a180cd56243d" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr const T *</type>
        <definition>constexpr const T * Azure::Nullable&lt; T &gt;::operator-&gt;</definition>
        <argsstring>() const</argsstring>
        <name>operator-&gt;</name>
        <qualifiedname>Azure::Nullable::operator-&gt;</qualifiedname>
        <briefdescription>
<para>Accesses the contained value. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Returns a pointer to the contained value. </para>
</simplesect>
<simplesect kind="warning"><para>The behavior is undefined if <computeroutput>*this</computeroutput> does not contain a value. </para>
</simplesect>
<simplesect kind="note"><para>This operator does not check whether the <ref refid="class_azure_1_1_nullable_1ab1032d685f3d89d91986c3896b88803d" kindref="member">Nullable</ref> contains a value! You can do so manually by using <ref refid="class_azure_1_1_nullable_1a9a0c797c4eb208551e045de2d97809f7" kindref="member">HasValue()</ref> or simply <ref refid="class_azure_1_1_nullable_1a0081534f590dc332391440478e05d6f5" kindref="member">operator bool()</ref>. Alternatively, if checked access is needed, <ref refid="class_azure_1_1_nullable_1a97723b8e1d2c4043c751a159697ba0c6" kindref="member">Value()</ref> or <ref refid="class_azure_1_1_nullable_1a6cb17c73e74a65db4defbae1ce74a1c1" kindref="member">ValueOr()</ref> may be used. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/azure/core/nullable.hpp" line="281" column="21" bodyfile="inc/azure/core/nullable.hpp" bodystart="281" bodyend="281"/>
      </memberdef>
      <memberdef kind="function" id="class_azure_1_1_nullable_1a10588327aa097a16979bd8e0922afa4b" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr T *</type>
        <definition>constexpr T * Azure::Nullable&lt; T &gt;::operator-&gt;</definition>
        <argsstring>()</argsstring>
        <name>operator-&gt;</name>
        <qualifiedname>Azure::Nullable::operator-&gt;</qualifiedname>
        <briefdescription>
<para>Accesses the contained value. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Returns a pointer to the contained value. </para>
</simplesect>
<simplesect kind="warning"><para>The behavior is undefined if <computeroutput>*this</computeroutput> does not contain a value. </para>
</simplesect>
<simplesect kind="note"><para>This operator does not check whether the <ref refid="class_azure_1_1_nullable_1ab1032d685f3d89d91986c3896b88803d" kindref="member">Nullable</ref> contains a value! You can do so manually by using <ref refid="class_azure_1_1_nullable_1a9a0c797c4eb208551e045de2d97809f7" kindref="member">HasValue()</ref> or simply <ref refid="class_azure_1_1_nullable_1a0081534f590dc332391440478e05d6f5" kindref="member">operator bool()</ref>. Alternatively, if checked access is needed, <ref refid="class_azure_1_1_nullable_1a97723b8e1d2c4043c751a159697ba0c6" kindref="member">Value()</ref> or <ref refid="class_azure_1_1_nullable_1a6cb17c73e74a65db4defbae1ce74a1c1" kindref="member">ValueOr()</ref> may be used. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/azure/core/nullable.hpp" line="291" column="15" bodyfile="inc/azure/core/nullable.hpp" bodystart="291" bodyend="291"/>
      </memberdef>
      <memberdef kind="function" id="class_azure_1_1_nullable_1aeb6beec913524bdb1f068687746f9ad4" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" refqual="lvalue" virt="non-virtual">
        <type>constexpr const T &amp;</type>
        <definition>constexpr const T &amp; Azure::Nullable&lt; T &gt;::operator*</definition>
        <argsstring>() const &amp;</argsstring>
        <name>operator*</name>
        <qualifiedname>Azure::Nullable::operator*</qualifiedname>
        <briefdescription>
<para>Accesses the contained value. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Returns a reference to the contained value. </para>
</simplesect>
<simplesect kind="warning"><para>The behavior is undefined if <computeroutput>*this</computeroutput> does not contain a value. </para>
</simplesect>
<simplesect kind="note"><para>This operator does not check whether the <ref refid="class_azure_1_1_nullable_1ab1032d685f3d89d91986c3896b88803d" kindref="member">Nullable</ref> contains a value! You can do so manually by using <ref refid="class_azure_1_1_nullable_1a9a0c797c4eb208551e045de2d97809f7" kindref="member">HasValue()</ref> or simply <ref refid="class_azure_1_1_nullable_1a0081534f590dc332391440478e05d6f5" kindref="member">operator bool()</ref>. Alternatively, if checked access is needed, <ref refid="class_azure_1_1_nullable_1a97723b8e1d2c4043c751a159697ba0c6" kindref="member">Value()</ref> or <ref refid="class_azure_1_1_nullable_1a6cb17c73e74a65db4defbae1ce74a1c1" kindref="member">ValueOr()</ref> may be used. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/azure/core/nullable.hpp" line="301" column="21" bodyfile="inc/azure/core/nullable.hpp" bodystart="301" bodyend="301"/>
      </memberdef>
      <memberdef kind="function" id="class_azure_1_1_nullable_1ac4c6c4b3d5ad7ebcd3c36052b992f8ed" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" refqual="lvalue" virt="non-virtual">
        <type>constexpr T &amp;</type>
        <definition>constexpr T &amp; Azure::Nullable&lt; T &gt;::operator*</definition>
        <argsstring>() &amp;</argsstring>
        <name>operator*</name>
        <qualifiedname>Azure::Nullable::operator*</qualifiedname>
        <briefdescription>
<para>Accesses the contained value. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Returns a reference to the contained value. </para>
</simplesect>
<simplesect kind="warning"><para>The behavior is undefined if <computeroutput>*this</computeroutput> does not contain a value. </para>
</simplesect>
<simplesect kind="note"><para>This operator does not check whether the <ref refid="class_azure_1_1_nullable_1ab1032d685f3d89d91986c3896b88803d" kindref="member">Nullable</ref> contains a value! You can do so manually by using <ref refid="class_azure_1_1_nullable_1a9a0c797c4eb208551e045de2d97809f7" kindref="member">HasValue()</ref> or simply <ref refid="class_azure_1_1_nullable_1a0081534f590dc332391440478e05d6f5" kindref="member">operator bool()</ref>. Alternatively, if checked access is needed, <ref refid="class_azure_1_1_nullable_1a97723b8e1d2c4043c751a159697ba0c6" kindref="member">Value()</ref> or <ref refid="class_azure_1_1_nullable_1a6cb17c73e74a65db4defbae1ce74a1c1" kindref="member">ValueOr()</ref> may be used. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/azure/core/nullable.hpp" line="311" column="15" bodyfile="inc/azure/core/nullable.hpp" bodystart="311" bodyend="311"/>
      </memberdef>
      <memberdef kind="function" id="class_azure_1_1_nullable_1a75a6159e00082a40582322be816562c6" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" refqual="rvalue" virt="non-virtual">
        <type>constexpr T &amp;&amp;</type>
        <definition>constexpr T &amp;&amp; Azure::Nullable&lt; T &gt;::operator*</definition>
        <argsstring>() &amp;&amp;</argsstring>
        <name>operator*</name>
        <qualifiedname>Azure::Nullable::operator*</qualifiedname>
        <briefdescription>
<para>Accesses the contained value. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Returns a reference to the contained value. </para>
</simplesect>
<simplesect kind="warning"><para>The behavior is undefined if <computeroutput>*this</computeroutput> does not contain a value. </para>
</simplesect>
<simplesect kind="note"><para>This operator does not check whether the <ref refid="class_azure_1_1_nullable_1ab1032d685f3d89d91986c3896b88803d" kindref="member">Nullable</ref> contains a value! You can do so manually by using <ref refid="class_azure_1_1_nullable_1a9a0c797c4eb208551e045de2d97809f7" kindref="member">HasValue()</ref> or simply <ref refid="class_azure_1_1_nullable_1a0081534f590dc332391440478e05d6f5" kindref="member">operator bool()</ref>. Alternatively, if checked access is needed, <ref refid="class_azure_1_1_nullable_1a97723b8e1d2c4043c751a159697ba0c6" kindref="member">Value()</ref> or <ref refid="class_azure_1_1_nullable_1a6cb17c73e74a65db4defbae1ce74a1c1" kindref="member">ValueOr()</ref> may be used. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/azure/core/nullable.hpp" line="321" column="15" bodyfile="inc/azure/core/nullable.hpp" bodystart="321" bodyend="321"/>
      </memberdef>
      <memberdef kind="function" id="class_azure_1_1_nullable_1abf7a0ba296829896efafa19544be5ef9" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" refqual="rvalue" virt="non-virtual">
        <type>constexpr const T &amp;&amp;</type>
        <definition>constexpr const T &amp;&amp; Azure::Nullable&lt; T &gt;::operator*</definition>
        <argsstring>() const &amp;&amp;</argsstring>
        <name>operator*</name>
        <qualifiedname>Azure::Nullable::operator*</qualifiedname>
        <briefdescription>
<para>Accesses the contained value. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Returns a reference to the contained value. </para>
</simplesect>
<simplesect kind="warning"><para>The behavior is undefined if <computeroutput>*this</computeroutput> does not contain a value. </para>
</simplesect>
<simplesect kind="note"><para>This operator does not check whether the <ref refid="class_azure_1_1_nullable_1ab1032d685f3d89d91986c3896b88803d" kindref="member">Nullable</ref> contains a value! You can do so manually by using <ref refid="class_azure_1_1_nullable_1a9a0c797c4eb208551e045de2d97809f7" kindref="member">HasValue()</ref> or simply <ref refid="class_azure_1_1_nullable_1a0081534f590dc332391440478e05d6f5" kindref="member">operator bool()</ref>. Alternatively, if checked access is needed, <ref refid="class_azure_1_1_nullable_1a97723b8e1d2c4043c751a159697ba0c6" kindref="member">Value()</ref> or <ref refid="class_azure_1_1_nullable_1a6cb17c73e74a65db4defbae1ce74a1c1" kindref="member">ValueOr()</ref> may be used. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/azure/core/nullable.hpp" line="331" column="21" bodyfile="inc/azure/core/nullable.hpp" bodystart="331" bodyend="331"/>
      </memberdef>
      <memberdef kind="function" id="class_azure_1_1_nullable_1a6cb17c73e74a65db4defbae1ce74a1c1" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" refqual="lvalue" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class U</type>
            <defval>T</defval>
          </param>
          <param>
            <type>typename std::enable_if&lt; std::is_convertible&lt; const T &amp;, typename std::remove_cv&lt; T &gt;::type &gt;::value &amp;&amp;std::is_convertible&lt; U, T &gt;::value, int &gt;::type</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>constexpr std::remove_cv&lt; T &gt;::type</type>
        <definition>constexpr std::remove_cv&lt; T &gt;::type Azure::Nullable&lt; T &gt;::ValueOr</definition>
        <argsstring>(U &amp;&amp;other) const &amp;</argsstring>
        <name>ValueOr</name>
        <qualifiedname>Azure::Nullable::ValueOr</qualifiedname>
        <param>
          <type>U &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Get the contained value, returns <computeroutput>other</computeroutput> if value is absent. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>A value to return when no value is contained. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A contained value (when present), or <computeroutput>other</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/azure/core/nullable.hpp" line="345" column="44" bodyfile="inc/azure/core/nullable.hpp" bodystart="345" bodyend="353"/>
      </memberdef>
      <memberdef kind="function" id="class_azure_1_1_nullable_1ae15748b7abfcb2a6a2c4dd72f2f8c3ec" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" refqual="rvalue" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class U</type>
            <defval>T</defval>
          </param>
          <param>
            <type>typename std::enable_if&lt; std::is_convertible&lt; T, typename std::remove_cv&lt; T &gt;::type &gt;::value &amp;&amp;std::is_convertible&lt; U, T &gt;::value, int &gt;::type</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>constexpr std::remove_cv&lt; T &gt;::type</type>
        <definition>constexpr std::remove_cv&lt; T &gt;::type Azure::Nullable&lt; T &gt;::ValueOr</definition>
        <argsstring>(U &amp;&amp;other) &amp;&amp;</argsstring>
        <name>ValueOr</name>
        <qualifiedname>Azure::Nullable::ValueOr</qualifiedname>
        <param>
          <type>U &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Get the contained value, returns <computeroutput>other</computeroutput> if value is absent. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>A value to return when no value is contained. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A contained value (when present), or <computeroutput>other</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/azure/core/nullable.hpp" line="367" column="44" bodyfile="inc/azure/core/nullable.hpp" bodystart="367" bodyend="375"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="friend">
      <memberdef kind="friend" id="class_azure_1_1_nullable_1a528123fd139cf279c4652467d7a448d9" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void swap</definition>
        <argsstring>(Nullable &amp;lhs, Nullable &amp;rhs) noexcept(std::is_nothrow_move_constructible&lt; T &gt;::value)</argsstring>
        <name>swap</name>
        <qualifiedname>Azure::Nullable::swap</qualifiedname>
        <param>
          <type><ref refid="class_azure_1_1_nullable" kindref="compound">Nullable</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="class_azure_1_1_nullable" kindref="compound">Nullable</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Invokes <ref refid="class_azure_1_1_nullable_1ab5af88a2c22ea9bc2eb9c9404a9227cd" kindref="member">Azure::Nullable::Swap</ref> while having a lowercase name that satisfies <computeroutput>swappable</computeroutput> requirements (see details). </para>
        </briefdescription>
        <detaileddescription>
<para>Swappable requirements: <ulink url="https://en.cppreference.com/w/cpp/named_req/Swappable">https://en.cppreference.com/w/cpp/named_req/Swappable</ulink> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/azure/core/nullable.hpp" line="147" column="15" bodyfile="inc/azure/core/nullable.hpp" bodystart="147" bodyend="151"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>Manages an optional contained value, i.e. a value that may or may not be present. </para>
    </briefdescription>
    <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>A type to represent contained values. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
    </detaileddescription>
    <collaborationgraph>
      <node id="1">
        <label>Azure::Nullable&lt; T &gt;</label>
        <link refid="class_azure_1_1_nullable"/>
        <childnode refid="2" relation="usage">
          <edgelabel>m_disengaged</edgelabel>
        </childnode>
      </node>
      <node id="2">
        <label>Azure::_detail::NontrivialEmptyType</label>
      </node>
    </collaborationgraph>
    <location file="inc/azure/core/nullable.hpp" line="30" column="12" bodyfile="inc/azure/core/nullable.hpp" bodystart="30" bodyend="376"/>
    <listofallmembers>
      <member refid="class_azure_1_1_nullable_1ab8e5d08de8f40fd0edd53868c6c757a8" prot="public" virt="non-virtual"><scope>Azure::Nullable</scope><name>Emplace</name></member>
      <member refid="class_azure_1_1_nullable_1a9a0c797c4eb208551e045de2d97809f7" prot="public" virt="non-virtual"><scope>Azure::Nullable</scope><name>HasValue</name></member>
      <member refid="class_azure_1_1_nullable_1a79bcb1c4eb4fd85df010fae635fc6260" prot="public" virt="non-virtual"><scope>Azure::Nullable</scope><name>m_disengaged</name></member>
      <member refid="class_azure_1_1_nullable_1a56f8d958f38817da42712c46e22efc90" prot="private" virt="non-virtual"><scope>Azure::Nullable</scope><name>m_hasValue</name></member>
      <member refid="class_azure_1_1_nullable_1a73ffd96428fc63312b5f94d198dcbc63" prot="public" virt="non-virtual"><scope>Azure::Nullable</scope><name>m_value</name></member>
      <member refid="class_azure_1_1_nullable_1ab1032d685f3d89d91986c3896b88803d" prot="public" virt="non-virtual"><scope>Azure::Nullable</scope><name>Nullable</name></member>
      <member refid="class_azure_1_1_nullable_1aa3b67f518c6b9451a052188f0482ad18" prot="public" virt="non-virtual"><scope>Azure::Nullable</scope><name>Nullable</name></member>
      <member refid="class_azure_1_1_nullable_1a2d64ebe47430d86eac341d620c8d1c30" prot="public" virt="non-virtual"><scope>Azure::Nullable</scope><name>Nullable</name></member>
      <member refid="class_azure_1_1_nullable_1aa0e7ba20ce95e979bc7450f532ad56b4" prot="public" virt="non-virtual"><scope>Azure::Nullable</scope><name>Nullable</name></member>
      <member refid="class_azure_1_1_nullable_1a0081534f590dc332391440478e05d6f5" prot="public" virt="non-virtual"><scope>Azure::Nullable</scope><name>operator bool</name></member>
      <member refid="class_azure_1_1_nullable_1aeb6beec913524bdb1f068687746f9ad4" prot="public" virt="non-virtual"><scope>Azure::Nullable</scope><name>operator*</name></member>
      <member refid="class_azure_1_1_nullable_1ac4c6c4b3d5ad7ebcd3c36052b992f8ed" prot="public" virt="non-virtual"><scope>Azure::Nullable</scope><name>operator*</name></member>
      <member refid="class_azure_1_1_nullable_1a75a6159e00082a40582322be816562c6" prot="public" virt="non-virtual"><scope>Azure::Nullable</scope><name>operator*</name></member>
      <member refid="class_azure_1_1_nullable_1abf7a0ba296829896efafa19544be5ef9" prot="public" virt="non-virtual"><scope>Azure::Nullable</scope><name>operator*</name></member>
      <member refid="class_azure_1_1_nullable_1a9503e5d99362c845c193a180cd56243d" prot="public" virt="non-virtual"><scope>Azure::Nullable</scope><name>operator-&gt;</name></member>
      <member refid="class_azure_1_1_nullable_1a10588327aa097a16979bd8e0922afa4b" prot="public" virt="non-virtual"><scope>Azure::Nullable</scope><name>operator-&gt;</name></member>
      <member refid="class_azure_1_1_nullable_1a9184df0f6056498df5fb9622d49b9a01" prot="public" virt="non-virtual"><scope>Azure::Nullable</scope><name>operator=</name></member>
      <member refid="class_azure_1_1_nullable_1a2094d9d0a555c15b22178168a7589dad" prot="public" virt="non-virtual"><scope>Azure::Nullable</scope><name>operator=</name></member>
      <member refid="class_azure_1_1_nullable_1a7b2657e238de56221f903b135cdaae44" prot="public" virt="non-virtual"><scope>Azure::Nullable</scope><name>operator=</name></member>
      <member refid="class_azure_1_1_nullable_1af73e1a55d0306d9002b02cc70cdfe5d2" prot="public" virt="non-virtual"><scope>Azure::Nullable</scope><name>Reset</name></member>
      <member refid="class_azure_1_1_nullable_1ab5af88a2c22ea9bc2eb9c9404a9227cd" prot="public" virt="non-virtual"><scope>Azure::Nullable</scope><name>Swap</name></member>
      <member refid="class_azure_1_1_nullable_1a528123fd139cf279c4652467d7a448d9" prot="public" virt="non-virtual"><scope>Azure::Nullable</scope><name>swap</name></member>
      <member refid="class_azure_1_1_nullable_1a97723b8e1d2c4043c751a159697ba0c6" prot="public" virt="non-virtual"><scope>Azure::Nullable</scope><name>Value</name></member>
      <member refid="class_azure_1_1_nullable_1a99fd0eee11cb24372bfa8b72c964252a" prot="public" virt="non-virtual"><scope>Azure::Nullable</scope><name>Value</name></member>
      <member refid="class_azure_1_1_nullable_1af891adde37c391b34b5529fd11218fd2" prot="public" virt="non-virtual"><scope>Azure::Nullable</scope><name>Value</name></member>
      <member refid="class_azure_1_1_nullable_1a6cb17c73e74a65db4defbae1ce74a1c1" prot="public" virt="non-virtual"><scope>Azure::Nullable</scope><name>ValueOr</name></member>
      <member refid="class_azure_1_1_nullable_1ae15748b7abfcb2a6a2c4dd72f2f8c3ec" prot="public" virt="non-virtual"><scope>Azure::Nullable</scope><name>ValueOr</name></member>
      <member refid="class_azure_1_1_nullable_1ad8625cdd03c048fcd14836c5a0e98874" prot="public" virt="non-virtual"><scope>Azure::Nullable</scope><name>~Nullable</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
