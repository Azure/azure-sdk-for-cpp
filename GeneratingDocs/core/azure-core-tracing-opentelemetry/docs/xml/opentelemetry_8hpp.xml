<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.10.0" xml:lang="en-US">
  <compounddef id="opentelemetry_8hpp" kind="file" language="C++">
    <compoundname>opentelemetry.hpp</compoundname>
    <includes local="no">azure/core/tracing/tracing.hpp</includes>
    <includes local="no">opentelemetry/trace/provider.h</includes>
    <includes local="no">opentelemetry/trace/tracer_provider.h</includes>
    <includedby refid="opentelemetry_8cpp" local="yes">src/opentelemetry.cpp</includedby>
    <includedby refid="opentelemetry__private_8hpp" local="yes">src/opentelemetry_private.hpp</includedby>
    <incdepgraph>
      <node id="1">
        <label>inc/azure/core/tracing/opentelemetry/opentelemetry.hpp</label>
        <link refid="opentelemetry_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>azure/core/tracing/tracing.hpp</label>
      </node>
      <node id="3">
        <label>opentelemetry/trace/provider.h</label>
      </node>
      <node id="4">
        <label>opentelemetry/trace/tracer_provider.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="1">
        <label>inc/azure/core/tracing/opentelemetry/opentelemetry.hpp</label>
        <link refid="opentelemetry_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>src/opentelemetry_private.hpp</label>
        <link refid="opentelemetry__private_8hpp_source"/>
      </node>
    </invincdepgraph>
    <innerclass refid="class_azure_1_1_core_1_1_tracing_1_1_open_telemetry_1_1_open_telemetry_provider" prot="public">Azure::Core::Tracing::OpenTelemetry::OpenTelemetryProvider</innerclass>
    <innernamespace refid="namespace_azure">Azure</innernamespace>
    <innernamespace refid="namespace_azure_1_1_core">Azure::Core</innernamespace>
    <innernamespace refid="namespace_azure_1_1_core_1_1_tracing">Azure::Core::Tracing</innernamespace>
    <innernamespace refid="namespace_azure_1_1_core_1_1_tracing_1_1_open_telemetry">Azure::Core::Tracing::OpenTelemetry</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Copyright<sp/>(c)<sp/>Microsoft<sp/>Corporation.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Licensed<sp/>under<sp/>the<sp/>MIT<sp/>License.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;azure/core/tracing/tracing.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(_azure_APIVIEW)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;azure/core/tracing/opentelemetry/internal/apiview.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(_MSC_VER)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>OpenTelemetry<sp/>headers<sp/>generate<sp/>a<sp/>couple<sp/>of<sp/>warnings<sp/>on<sp/>MSVC<sp/>in<sp/>the<sp/>OTel<sp/>1.2<sp/>package,<sp/>suppress</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>warnings<sp/>across<sp/>the<sp/>includes.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>warning(push)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>warning(disable<sp/>:<sp/>4100)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>warning(disable<sp/>:<sp/>4244)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>warning(disable<sp/>:<sp/>6323)<sp/></highlight><highlight class="comment">//<sp/>Disable<sp/>&quot;Use<sp/>of<sp/>arithmetic<sp/>operator<sp/>on<sp/>Boolean<sp/>type&quot;<sp/>warning.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;opentelemetry/trace/provider.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;opentelemetry/trace/tracer_provider.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(_MSC_VER)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>warning(pop)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Azure<sp/>{<sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Core<sp/>{<sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Tracing<sp/>{<sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">OpenTelemetry<sp/>{</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="36" refid="class_azure_1_1_core_1_1_tracing_1_1_open_telemetry_1_1_open_telemetry_provider" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_azure_1_1_core_1_1_tracing_1_1_open_telemetry_1_1_open_telemetry_provider" kindref="compound">OpenTelemetryProvider</ref><sp/>final<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>Azure::Core::Tracing::TracerProvider<sp/>{</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/>std::shared_ptr&lt;Azure::Core::Tracing::_internal::Tracer&gt;<sp/>CreateTracer(</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>name,</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>version)<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/>opentelemetry::nostd::shared_ptr&lt;opentelemetry::trace::TracerProvider&gt;<sp/>m_tracerProvider;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="class_azure_1_1_core_1_1_tracing_1_1_open_telemetry_1_1_open_telemetry_provider" kindref="compound">OpenTelemetryProvider</ref>(</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>opentelemetry::nostd::shared_ptr&lt;opentelemetry::trace::TracerProvider&gt;<sp/>tracerProvider</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>opentelemetry::trace::Provider::GetTracerProvider());</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Schema<sp/>URL<sp/>for<sp/>OpenTelemetry.<sp/>Azure<sp/>SDKs<sp/>currently<sp/>support<sp/>version<sp/>1.17.0<sp/>only.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>OpenTelemetrySchemaUrl117<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;https://opentelemetry.io/schemas/1.17.0&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>OpenTelemetrySchemaUrlCurrent<sp/>=<sp/>OpenTelemetrySchemaUrl117;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;OpenTelemetryProvider&gt;<sp/><ref refid="class_azure_1_1_core_1_1_tracing_1_1_open_telemetry_1_1_open_telemetry_provider_1a116163fdb6d81205e329c42e329c09bf" kindref="member">Create</ref>(</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>opentelemetry::nostd::shared_ptr&lt;opentelemetry::trace::TracerProvider&gt;<sp/>tracerProvider</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>opentelemetry::trace::Provider::GetTracerProvider());</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/><ref refid="class_azure_1_1_core_1_1_tracing_1_1_open_telemetry_1_1_open_telemetry_provider" kindref="compound">~OpenTelemetryProvider</ref>()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal">}}}}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>Azure::Core::Tracing::OpenTelemetry</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="inc/azure/core/tracing/opentelemetry/opentelemetry.hpp"/>
  </compounddef>
</doxygen>
