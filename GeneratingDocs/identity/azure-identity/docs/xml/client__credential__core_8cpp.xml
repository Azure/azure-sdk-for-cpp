<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.10.0" xml:lang="en-US">
  <compounddef id="client__credential__core_8cpp" kind="file" language="C++">
    <compoundname>client_credential_core.cpp</compoundname>
    <includes refid="client__credential__core_8hpp" local="yes">azure/identity/detail/client_credential_core.hpp</includes>
    <includes refid="tenant__id__resolver_8hpp" local="yes">private/tenant_id_resolver.hpp</includes>
    <includes refid="token__credential__impl_8hpp" local="yes">private/token_credential_impl.hpp</includes>
    <incdepgraph>
      <node id="2">
        <label>azure/identity/detail/client_credential_core.hpp</label>
        <link refid="client__credential__core_8hpp_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>src/client_credential_core.cpp</label>
        <link refid="client__credential__core_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>private/tenant_id_resolver.hpp</label>
        <link refid="tenant__id__resolver_8hpp_source"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>private/token_credential_impl.hpp</label>
        <link refid="token__credential__impl_8hpp"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>azure/core/credentials/credentials.hpp</label>
      </node>
      <node id="11">
        <label>azure/core/credentials/token_credential_options.hpp</label>
      </node>
      <node id="12">
        <label>azure/core/http/http.hpp</label>
      </node>
      <node id="13">
        <label>azure/core/http/http_status_code.hpp</label>
      </node>
      <node id="14">
        <label>azure/core/http/raw_response.hpp</label>
      </node>
      <node id="5">
        <label>azure/core/internal/environment.hpp</label>
      </node>
      <node id="15">
        <label>azure/core/internal/http/pipeline.hpp</label>
      </node>
      <node id="16">
        <label>azure/core/io/body_stream.hpp</label>
      </node>
      <node id="6">
        <label>azure/core/url.hpp</label>
      </node>
      <node id="3">
        <label>azure/identity/dll_import_export.hpp</label>
      </node>
      <node id="17">
        <label>functional</label>
      </node>
      <node id="18">
        <label>memory</label>
      </node>
      <node id="7">
        <label>string</label>
      </node>
      <node id="19">
        <label>utility</label>
      </node>
      <node id="8">
        <label>vector</label>
      </node>
    </incdepgraph>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Copyright<sp/>(c)<sp/>Microsoft<sp/>Corporation.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Licensed<sp/>under<sp/>the<sp/>MIT<sp/>License.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;azure/identity/detail/client_credential_core.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;private/tenant_id_resolver.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="token__credential__impl_8hpp" kindref="compound">private/token_credential_impl.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">Azure::Identity::_detail::ClientCredentialCore;</highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">Azure::Core::Url;</highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">Azure::Core::Credentials::TokenRequestContext;</highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">Azure::Identity::_detail::TenantIdResolver;</highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">Azure::Identity::_detail::TokenCredentialImpl;</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>authority<sp/>host<sp/>used<sp/>by<sp/>the<sp/>credentials<sp/>is<sp/>in<sp/>the<sp/>following<sp/>order<sp/>of<sp/>precedence:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">//<sp/>1.<sp/>AuthorityHost<sp/>option<sp/>set/overriden<sp/>by<sp/>the<sp/>user.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">//<sp/>2.<sp/>The<sp/>value<sp/>of<sp/>AZURE_AUTHORITY_HOST<sp/>environment<sp/>variable,<sp/>which<sp/>is<sp/>the<sp/>default<sp/>value<sp/>of<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">//<sp/>option.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">//<sp/>3.<sp/>If<sp/>that<sp/>environment<sp/>variable<sp/>isn&apos;t<sp/>set<sp/>or<sp/>is<sp/>empty,<sp/>use<sp/>Azure<sp/>Public<sp/>Cloud.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal">ClientCredentialCore::ClientCredentialCore(</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>tenantId,</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>authorityHost,</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::string&gt;<sp/>additionallyAllowedTenants)</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>m_additionallyAllowedTenants(std::move(additionallyAllowedTenants)),</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_authorityHost(Url(authorityHost)),<sp/>m_tenantId(std::move(tenantId))</highlight></codeline>
<codeline lineno="27"><highlight class="normal">{</highlight></codeline>
<codeline lineno="28"><highlight class="normal">}</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal">Url<sp/>ClientCredentialCore::GetRequestUrl(std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>tenantId)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="31"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_authorityHost.GetScheme()<sp/>!=<sp/></highlight><highlight class="stringliteral">&quot;https&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>Azure::Core::Credentials::AuthenticationException(</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Authority<sp/>host<sp/>must<sp/>be<sp/>a<sp/>TLS<sp/>protected<sp/>(https)<sp/>endpoint.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>requestUrl<sp/>=<sp/>m_authorityHost;</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/>requestUrl.AppendPath(tenantId);</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/>requestUrl.AppendPath(TenantIdResolver::IsAdfs(tenantId)<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;oauth2/token&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;oauth2/v2.0/token&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>requestUrl;</highlight></codeline>
<codeline lineno="43"><highlight class="normal">}</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal">std::string<sp/>ClientCredentialCore::GetScopesString(</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>tenantId,</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">decltype</highlight><highlight class="normal">(TokenRequestContext::Scopes)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>scopes)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="48"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>scopes.empty()</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>?<sp/>std::string()</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>TokenCredentialImpl::FormatScopes(scopes,<sp/>TenantIdResolver::IsAdfs(tenantId));</highlight></codeline>
<codeline lineno="52"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="src/client_credential_core.cpp"/>
  </compounddef>
</doxygen>
